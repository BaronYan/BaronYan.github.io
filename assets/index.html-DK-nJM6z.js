import{_ as l,c,a as s,b as p,w as t,e as n,d as e,r as i,o}from"./app-rsodlAt-.js";const u={},r=e(`<h2 id="打印功能的原理" tabindex="-1"><a class="header-anchor" href="#打印功能的原理"><span>打印功能的原理</span></a></h2><p>当然,我很乐意为您详细介绍打印功能的原理。在我们的系统中,打印功能主要通过以下步骤实现:</p><h3 id="_1-创建新窗口" tabindex="-1"><a class="header-anchor" href="#_1-创建新窗口"><span>1. 创建新窗口</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> printWindow <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;_blank&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这行代码打开一个新的浏览器窗口或标签。新窗口最初是空白的,我们将在其中插入要打印的内容。</p><h3 id="_2-设置打印样式" tabindex="-1"><a class="header-anchor" href="#_2-设置打印样式"><span>2. 设置打印样式</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">printWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;style&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">printWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">getPrintStyles</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">printWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;/style&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们向新窗口写入自定义的CSS样式。这些样式定义了打印时的页面布局、尺寸等。</p><h3 id="_3-生成打印内容" tabindex="-1"><a class="header-anchor" href="#_3-生成打印内容"><span>3. 生成打印内容</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> quantity<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> currentNumber <span class="token operator">=</span> startNumber <span class="token operator">+</span> i</span>
<span class="line">  <span class="token keyword">const</span> currentBarcode <span class="token operator">=</span> <span class="token function">generateBarcode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line">  printWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;div class=&quot;label-container&quot;&gt;</span>
<span class="line">      &lt;div class=&quot;label-number&quot;&gt;第 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 张，共 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>quantity<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 张&lt;/div&gt;</span>
<span class="line">      </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getLabelContent</span><span class="token punctuation">(</span>labelData<span class="token punctuation">,</span> currentBarcode<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个循环根据用户指定的数量生成多个标签内容,并将它们写入新窗口。</p><h3 id="_4-生成条形码" tabindex="-1"><a class="header-anchor" href="#_4-生成条形码"><span>4. 生成条形码</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">printWindow<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> barcodes <span class="token operator">=</span> printWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;#barcode&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  barcodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">barcode<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">JsBarcode</span><span class="token punctuation">(</span>barcode<span class="token punctuation">,</span> <span class="token function">generateBarcode</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&quot;CODE128&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">displayValue</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在新窗口加载完成后,我们使用JsBarcode库为每个标签生成条形码。</p><h3 id="_5-触发打印" tabindex="-1"><a class="header-anchor" href="#_5-触发打印"><span>5. 触发打印</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  printWindow<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  printWindow<span class="token punctuation">.</span><span class="token function-variable function">onafterprint</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    printWindow<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用setTimeout来确保所有内容(包括条形码)都已经渲染完成,然后调用print()方法触发浏览器的打印对话框。打印完成后,我们关闭新窗口。</p><p>这种方法的优点包括:</p><ul><li>隔离性: 打印内容在新窗口中生成,不会影响主应用程序的状态或显示。</li><li>灵活性: 我们可以完全控制打印内容的样式和布局。</li><li>多页打印: 可以轻松生成多个标签或多页内容。</li><li>浏览器兼容性: 这种方法在大多数现代浏览器中都能很好地工作。</li></ul><p>需要注意的是,这种方法可能会被某些浏览器的弹出窗口拦截器阻止。在实际应用中,可能需要提醒用户允许弹出窗口,或考虑使用内嵌iframe的替代方案。</p><h2 id="内嵌的-iframe" tabindex="-1"><a class="header-anchor" href="#内嵌的-iframe"><span>内嵌的 iframe</span></a></h2><p>此外,打印的最终效果可能会受到用户的打印机设置和浏览器打印预览功能的影响。因此,在开发过程中,经常进行实际的打印测试是很重要的。</p>`,22),d=s("code",null,"printDirectly",-1),k=e(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">printDirectly</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> quantity<span class="token punctuation">,</span> startNumber<span class="token punctuation">,</span> labelData<span class="token punctuation">,</span> labelType<span class="token punctuation">,</span> customWidth<span class="token punctuation">,</span> customHeight<span class="token punctuation">,</span> generateBarcode<span class="token punctuation">,</span> getLabelContent <span class="token operator">=</span> getExpressLabelContent<span class="token punctuation">,</span> title <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 创建隐藏的iframe用于打印</span></span>
<span class="line">  <span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;iframe&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  iframe<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span></span>
<span class="line">  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> width<span class="token punctuation">,</span> height <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getLabelSize</span><span class="token punctuation">(</span>labelType<span class="token punctuation">,</span> customWidth<span class="token punctuation">,</span> customHeight<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> doc <span class="token operator">=</span> iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>document</span>
<span class="line">  doc<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  doc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;html&gt;&lt;head&gt;&lt;title&gt;打印快递面单&lt;/title&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  doc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;style&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  doc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">getPrintStyles</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  doc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 生成所有标签</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> quantity<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> currentNumber <span class="token operator">=</span> startNumber <span class="token operator">+</span> i</span>
<span class="line">    <span class="token keyword">const</span> currentBarcode <span class="token operator">=</span> <span class="token function">generateBarcode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></span>
<span class="line">    doc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">      &lt;div class=&quot;label-container&quot;&gt;</span>
<span class="line">        &lt;div class=&quot;label-number&quot;&gt;第 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 张，共 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>quantity<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> 张&lt;/div&gt;</span>
<span class="line">        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">getLabelContent</span><span class="token punctuation">(</span>labelData<span class="token punctuation">,</span> currentBarcode<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">      &lt;/div&gt;</span>
<span class="line">    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  doc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  doc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 在iframe加载完成后生成条形码并打印</span></span>
<span class="line">  iframe<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> barcodes <span class="token operator">=</span> iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;#barcode&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    barcodes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">barcode<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">JsBarcode</span><span class="token punctuation">(</span>barcode<span class="token punctuation">,</span> <span class="token function">generateBarcode</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">format</span><span class="token operator">:</span> <span class="token string">&quot;CODE128&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">displayValue</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 延迟打印以确保条形码已生成</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法的主要特点和优势包括：</p><h3 id="_1-用内嵌-iframe" tabindex="-1"><a class="header-anchor" href="#_1-用内嵌-iframe"><span>1. 用内嵌 iframe</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;iframe&#39;</span><span class="token punctuation">)</span></span>
<span class="line">iframe<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span></span>
<span class="line">document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个隐藏的 iframe 并添加到当前文档中,而不是打开新窗口。</p><h3 id="_2-避免弹出窗口拦截" tabindex="-1"><a class="header-anchor" href="#_2-避免弹出窗口拦截"><span>2. 避免弹出窗口拦截</span></a></h3><p>由于使用内嵌 iframe,不会触发浏览器的弹出窗口拦截机制。</p><h3 id="_3-更好的集成" tabindex="-1"><a class="header-anchor" href="#_3-更好的集成"><span>3. 更好的集成</span></a></h3><p>iframe 是当前页面的一部分,可以更好地控制打印过程和时机。</p><h3 id="_4-相似的内容生成过程" tabindex="-1"><a class="header-anchor" href="#_4-相似的内容生成过程"><span>4. 相似的内容生成过程</span></a></h3><p>尽管使用了 iframe,但生成打印内容的过程与 <code>openPrintWindow</code> 方法非常相似。</p><h3 id="_5-打印后自动移除" tabindex="-1"><a class="header-anchor" href="#_5-打印后自动移除"><span>5. 打印后自动移除</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">   <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">     document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span></span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印完成后,iframe 会被从文档中移除,保持页面整洁。</p><h3 id="_6-兼容性" tabindex="-1"><a class="header-anchor" href="#_6-兼容性"><span>6. 兼容性</span></a></h3><p>这种方法在大多数现代浏览器中都能很好地工作,并且不受弹出窗口设置的影响。 使用内嵌 iframe 的方法确实解决了弹出窗口可能被拦截的问题,同时保持了打印功能的灵活性和可控性。这是一个很好的替代方案,特别是在需要避免弹出窗口或希望更紧密集成打印功能到现有页面的情况下。</p><h2 id="优化建议" tabindex="-1"><a class="header-anchor" href="#优化建议"><span>优化建议</span></a></h2><p>我们可以考虑一些优化方案来改进当前的打印功能。以下是一些可能的优化建议:</p><h3 id="使用-web-workers-生成内容" tabindex="-1"><a class="header-anchor" href="#使用-web-workers-生成内容"><span>使用 Web Workers 生成内容:</span></a></h3><p>对于大量标签或复杂的内容生成,我们可以将内容生成过程移到 Web Worker 中,以避免阻塞主线程。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 创建一个 Web Worker</span></span>
<span class="line"><span class="token keyword">const</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Worker</span><span class="token punctuation">(</span><span class="token string">&#39;contentGenerator.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">worker<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token punctuation">{</span> quantity<span class="token punctuation">,</span> startNumber<span class="token punctuation">,</span> labelData<span class="token punctuation">,</span> labelType <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">worker<span class="token punctuation">.</span><span class="token function-variable function">onmessage</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> generatedContent <span class="token operator">=</span> e<span class="token punctuation">.</span>data<span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 使用生成的内容更新 iframe 或打印窗口</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="虚拟化长列表" tabindex="-1"><a class="header-anchor" href="#虚拟化长列表"><span>虚拟化长列表:</span></a></h3><p>如果需要打印大量标签,可以考虑使用虚拟滚动技术,只渲染可见区域的标签,以提高性能。</p><h3 id="异步加载资源" tabindex="-1"><a class="header-anchor" href="#异步加载资源"><span>异步加载资源:</span></a></h3><p>对于需要加载的外部资源(如字体、图片),可以使用异步加载,并在所有资源加载完成后再触发打印。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">  <span class="token function">loadFont</span><span class="token punctuation">(</span><span class="token string">&#39;customFont.woff2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">loadImage</span><span class="token punctuation">(</span><span class="token string">&#39;logo.png&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 所有资源加载完成,开始打印</span></span>
<span class="line">  iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="缓存生成的内容" tabindex="-1"><a class="header-anchor" href="#缓存生成的内容"><span>缓存生成的内容:</span></a></h3><p>如果用户经常打印相同的内容,可以考虑缓存生成的 HTML 内容。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> contentCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getOrGenerateContent</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> generateFunc</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>contentCache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> contentCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">const</span> content <span class="token operator">=</span> <span class="token function">generateFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  contentCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> content<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-web-components" tabindex="-1"><a class="header-anchor" href="#使用-web-components"><span>使用 Web Components:</span></a></h3><p>可以将标签内容封装为自定义元素,这样可以更好地控制渲染和样式隔离。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">LabelElement</span> <span class="token keyword">extends</span> <span class="token class-name">HTMLElement</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">connectedCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">      &lt;div class=&quot;label-container&quot;&gt;</span>
<span class="line">        </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;content&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"></span>
<span class="line">      &lt;/div&gt;</span>
<span class="line">    </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">customElements<span class="token punctuation">.</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">&#39;print-label&#39;</span><span class="token punctuation">,</span> LabelElement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="优化条形码生成" tabindex="-1"><a class="header-anchor" href="#优化条形码生成"><span>优化条形码生成:</span></a></h3><p>可以考虑使用 Web Assembly 版本的条形码生成库,以提高性能。</p><h3 id="使用-css-打印优化" tabindex="-1"><a class="header-anchor" href="#使用-css-打印优化"><span>使用 CSS 打印优化:</span></a></h3><p>利用 CSS 的 @page 规则和 @media print 查询来更精确地控制打印布局。</p><div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre class="language-css"><code><span class="line"><span class="token atrule"><span class="token rule">@page</span></span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">size</span><span class="token punctuation">:</span> 100mm 150mm<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token atrule"><span class="token rule">@media</span> print</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token selector">.no-print</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="批量处理" tabindex="-1"><a class="header-anchor" href="#批量处理"><span>批量处理:</span></a></h3><p>对于大量标签,可以考虑分批生成和打印,以减少内存使用并提高响应性。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">batchGenerator</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> batchSize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> i <span class="token operator">+=</span> batchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">yield</span> <span class="token punctuation">{</span> <span class="token literal-property property">start</span><span class="token operator">:</span> i<span class="token punctuation">,</span> <span class="token literal-property property">end</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> batchSize<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> batches <span class="token operator">=</span> <span class="token function">batchGenerator</span><span class="token punctuation">(</span>quantity<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> batch <span class="token keyword">of</span> batches<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 生成并打印这一批标签</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="预渲染常用内容" tabindex="-1"><a class="header-anchor" href="#预渲染常用内容"><span>预渲染常用内容</span></a></h3><p>对于经常使用的标签模板,可以预先渲染并存储,以加快生成速度。</p><h3 id="使用-service-worker" tabindex="-1"><a class="header-anchor" href="#使用-service-worker"><span>使用 Service Worker</span></a></h3><p>可以利用 Service Worker 来缓存打印资源,使得即使在离线状态下也能打印。</p><p>这些优化方案可以根据具体的使用场景和性能需求来选择实施。每种优化都有其适用的场景,建议在实施前进行性能测试,以确定哪些优化措施能带来最大的收益。</p>`,45);function v(m,b){const a=i("RouteLink");return o(),c("div",null,[s("ul",null,[s("li",null,[p(a,{to:"/vue3/demo/print/print1.html"},{default:t(()=>[n("打印demo 1")]),_:1})]),s("li",null,[p(a,{to:"/vue3/demo/print/print2.html"},{default:t(()=>[n("打印demo 2")]),_:1})]),s("li",null,[p(a,{to:"/vue3/demo/print/print3.html"},{default:t(()=>[n("打印demo 3")]),_:1})])]),r,s("p",null,[p(a,{to:"/vue3/demo/print/print3.html"},{default:t(()=>[n("printDirectly")]),_:1}),n(" 方法确实使用了内嵌的 iframe 作为替代方案。这是一个很好的观察。让我们详细解释一下 "),d,n(" 方法的工作原理：")]),k])}const g=l(u,[["render",v],["__file","index.html.vue"]]),f=JSON.parse('{"path":"/vue3/demo/print/","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"打印功能的原理","slug":"打印功能的原理","link":"#打印功能的原理","children":[{"level":3,"title":"1. 创建新窗口","slug":"_1-创建新窗口","link":"#_1-创建新窗口","children":[]},{"level":3,"title":"2. 设置打印样式","slug":"_2-设置打印样式","link":"#_2-设置打印样式","children":[]},{"level":3,"title":"3. 生成打印内容","slug":"_3-生成打印内容","link":"#_3-生成打印内容","children":[]},{"level":3,"title":"4. 生成条形码","slug":"_4-生成条形码","link":"#_4-生成条形码","children":[]},{"level":3,"title":"5. 触发打印","slug":"_5-触发打印","link":"#_5-触发打印","children":[]}]},{"level":2,"title":"内嵌的 iframe","slug":"内嵌的-iframe","link":"#内嵌的-iframe","children":[{"level":3,"title":"1. 用内嵌 iframe","slug":"_1-用内嵌-iframe","link":"#_1-用内嵌-iframe","children":[]},{"level":3,"title":"2. 避免弹出窗口拦截","slug":"_2-避免弹出窗口拦截","link":"#_2-避免弹出窗口拦截","children":[]},{"level":3,"title":"3. 更好的集成","slug":"_3-更好的集成","link":"#_3-更好的集成","children":[]},{"level":3,"title":"4. 相似的内容生成过程","slug":"_4-相似的内容生成过程","link":"#_4-相似的内容生成过程","children":[]},{"level":3,"title":"5. 打印后自动移除","slug":"_5-打印后自动移除","link":"#_5-打印后自动移除","children":[]},{"level":3,"title":"6. 兼容性","slug":"_6-兼容性","link":"#_6-兼容性","children":[]}]},{"level":2,"title":"优化建议","slug":"优化建议","link":"#优化建议","children":[{"level":3,"title":"使用 Web Workers 生成内容:","slug":"使用-web-workers-生成内容","link":"#使用-web-workers-生成内容","children":[]},{"level":3,"title":"虚拟化长列表:","slug":"虚拟化长列表","link":"#虚拟化长列表","children":[]},{"level":3,"title":"异步加载资源:","slug":"异步加载资源","link":"#异步加载资源","children":[]},{"level":3,"title":"缓存生成的内容:","slug":"缓存生成的内容","link":"#缓存生成的内容","children":[]},{"level":3,"title":"使用 Web Components:","slug":"使用-web-components","link":"#使用-web-components","children":[]},{"level":3,"title":"优化条形码生成:","slug":"优化条形码生成","link":"#优化条形码生成","children":[]},{"level":3,"title":"使用 CSS 打印优化:","slug":"使用-css-打印优化","link":"#使用-css-打印优化","children":[]},{"level":3,"title":"批量处理:","slug":"批量处理","link":"#批量处理","children":[]},{"level":3,"title":"预渲染常用内容","slug":"预渲染常用内容","link":"#预渲染常用内容","children":[]},{"level":3,"title":"使用 Service Worker","slug":"使用-service-worker","link":"#使用-service-worker","children":[]}]}],"git":{"updatedTime":1726119461000,"contributors":[{"name":"BaronYan","email":"1229598328@qq.com","commits":2}]},"filePathRelative":"vue3/demo/print/index.md","excerpt":"<ul>\\n<li><a href=\\"/vue3/demo/print/print1.html\\" target=\\"_blank\\">打印demo 1</a></li>\\n<li><a href=\\"/vue3/demo/print/print2.html\\" target=\\"_blank\\">打印demo 2</a></li>\\n<li><a href=\\"/vue3/demo/print/print3.html\\" target=\\"_blank\\">打印demo 3</a></li>\\n</ul>\\n<h2>打印功能的原理</h2>\\n<p>当然,我很乐意为您详细介绍打印功能的原理。在我们的系统中,打印功能主要通过以下步骤实现:</p>"}');export{g as comp,f as data};
