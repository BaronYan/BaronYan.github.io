import{_ as s,c as n,o as a,d as t}from"./app-B0EUrWRJ.js";const e={},p=t(`<p><strong>相关链接</strong></p><ul><li><a href="https://cn.vuejs.org/api/sfc-script-setup" target="_blank" rel="noopener noreferrer">setup语法糖</a></li></ul><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><code>&lt;script setup&gt;</code> 是在单文件组件 (SFC) 中使用组合式 API 的<strong>编译时语法糖</strong>。 当同时使用 SFC 与组合式 API 时，该语法是默认推荐。相比于普通的 <code>&lt;script&gt;</code> 语法，它具有更多优势：</p><ul><li>更简洁的代码。</li><li>能够使用 TypeScript 声明 props 和自定义事件。</li><li>更好的运行时性能 (其模板会被编译成同一作用域内的渲染函数，避免了渲染上下文代理对象)。</li><li>更好的 IDE 类型推导性能</li><li><code>&lt;script setup&gt;...&lt;/script&gt;</code> 里的代码会被编译成组件 <code>setup()</code> 函数的内容。</li><li>这意味着<span class="bg-yellow-200">与普通的 <code>&lt;script&gt;</code> 只在组件被首次引入的时候执行一次不同，<code>&lt;script setup&gt;</code> 中的代码会在每次组件实例被创建的时候执行。</span></li><li>任何在 <code>&lt;script setup&gt;</code> 声明的顶层的绑定 (包括变量，函数声明，以及 import 导入的内容) 都能在模板中直接使用</li><li>ref 在模板中使用的时候会自动解包</li><li><code>defineProps</code> 和 <code>defineEmits</code> 都是只能在 <code>&lt;script setup&gt;</code> 中使用的编译器宏。他们不需要导入，且会随着 <code>&lt;script setup&gt;</code> 的处理过程一同被编译掉。</li><li>传入到 <code>defineProps</code> 和 <code>defineEmits</code> 的选项会从 <code>setup</code> 中提升到模块的作用域。因此，传入的选项不能引用在 <code>setup</code> 作用域中声明的局部变量。这样做会引起编译错误。但是，它可以引用导入的绑定，因为它们也在模块作用域内。</li><li>使用 <code>&lt;script setup&gt;</code> 的组件是默认关闭的——即通过模板引用或者 <code>$parent</code> 链获取到的组件的公开实例，不会暴露任何在 <code>&lt;script setup&gt;</code> 中声明的绑定。</li><li>可以通过 <code>defineExpose</code> 编译器宏来显式指定在 <code>&lt;script setup&gt;</code> 组件中要暴露出去的属性</li></ul><h3 id="使用组件" tabindex="-1"><a class="header-anchor" href="#使用组件"><span>使用组件</span></a></h3><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"><span class="token keyword">import</span> MyComponent <span class="token keyword">from</span> <span class="token string">&#39;./MyComponent.vue&#39;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyComponent</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>MyComponent</code> 应当被理解为像是在引用一个变量。 其 kebab-case 格式的 <code>&lt;my-component&gt;</code> 同样能在模板中使用。</p><p>由于组件是通过变量引用而不是基于字符串组件名注册的，在 <code>&lt;script setup&gt;</code> 中要使用动态组件的时候，应该使用动态的 <code>:is</code> 来绑定：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"><span class="token keyword">import</span> Foo <span class="token keyword">from</span> <span class="token string">&#39;./Foo.vue&#39;</span></span>
<span class="line"><span class="token keyword">import</span> Bar <span class="token keyword">from</span> <span class="token string">&#39;./Bar.vue&#39;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Foo<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">:is</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>someCondition ? Foo : Bar<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="递归组件" tabindex="-1"><a class="header-anchor" href="#递归组件"><span>递归组件</span></a></h3><p>一个单文件组件可以通过它的文件名被其自己所引用。例如：名为 <code>FooBar.vue</code> 的组件可以在其模板中用 <code>&lt;FooBar/&gt;</code> 引用它自己。</p><p>请注意这种方式相比于导入的组件优先级更低。如果有具名的导入和组件自身推导的名字冲突了，可以为导入的组件添加别名： <code>import { FooBar as FooBarChild } from &#39;./components&#39;</code></p><h3 id="命名空间组件" tabindex="-1"><a class="header-anchor" href="#命名空间组件"><span>命名空间组件</span></a></h3><p>可以使用带 <code>.</code> 的组件标签，例如 <code>&lt;Foo.Bar&gt;</code> 来引用嵌套在对象属性中的组件。这在需要从单个文件中导入多个组件的时候非常有用：</p><div class="language-vue line-numbers-mode" data-highlighter="prismjs" data-ext="vue" data-title="vue"><pre class="language-vue"><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">setup</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Form <span class="token keyword">from</span> <span class="token string">&#39;./form-components&#39;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Input</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Form.Label</span><span class="token punctuation">&gt;</span></span>label<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Label</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Form.Input</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),l=[p];function c(o,i){return a(),n("div",null,l)}const r=s(e,[["render",c],["__file","setup语法糖.html.vue"]]),d=JSON.parse('{"path":"/vue3/setup%E8%AF%AD%E6%B3%95%E7%B3%96.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"使用组件","slug":"使用组件","link":"#使用组件","children":[]},{"level":3,"title":"递归组件","slug":"递归组件","link":"#递归组件","children":[]},{"level":3,"title":"命名空间组件","slug":"命名空间组件","link":"#命名空间组件","children":[]}]}],"git":{"updatedTime":1719594779000,"contributors":[{"name":"BaronYan","email":"1229598328@qq.com","commits":1}]},"filePathRelative":"vue3/setup语法糖.md","excerpt":"<p><strong>相关链接</strong></p>\\n<ul>\\n<li><a href=\\"https://cn.vuejs.org/api/sfc-script-setup\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">setup语法糖</a></li>\\n</ul>\\n<h2>简介</h2>\\n<p><code>&lt;script setup&gt;</code> 是在单文件组件 (SFC) 中使用组合式 API 的<strong>编译时语法糖</strong>。\\n当同时使用 SFC 与组合式 API 时，该语法是默认推荐。相比于普通的 <code>&lt;script&gt;</code> 语法，它具有更多优势：</p>"}');export{r as comp,d as data};
