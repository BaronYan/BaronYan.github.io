import{_ as s,c as n,o as a,d as e}from"./app-Mhqc5-4F.js";const i={},t=e(`<p>Webview 是一种嵌入式浏览器组件， 用于在移动应用程序或桌面应用程序中显示网页内容。 它允许开发者在应用程序内嵌入和显示网页，而无需切换到独立的浏览器应用程序。 Webview 常用于展示静态网页、动态内容、或者与服务器交互的内容。</p><p><strong>主要特点和用途</strong></p><ul><li><strong>嵌入网页内容</strong>: 开发者可以在应用程序内嵌入网页，无需打开外部浏览器。</li><li><strong>跨平台支持</strong>: Webview 在 Android、iOS、Windows 和 macOS 等平台上都得到广泛支持。</li><li><strong>与原生代码交互</strong>: Webview 可以通过 JavaScript 与应用程序的原生代码交互，允许双向通信。</li><li><strong>展示动态内容</strong>: 适用于需要展示实时更新内容的场景，如新闻、社交媒体、数据可视化等。</li></ul><p><strong>常见的应用场景</strong></p><ul><li><strong>嵌入式网页应用</strong>: 一些应用程序可能包含一个或多个嵌入式网页部分。</li><li><strong>混合应用开发</strong>: 使用 Web 技术开发的部分或全部应用程序。</li><li><strong>广告展示</strong>: 在应用程序中嵌入广告内容。</li><li><strong>内容管理</strong>: 动态加载和展示基于网页的内容，如博客文章、新闻等。</li></ul><p><strong>webView 在微信小程序中是如何应用的</strong></p><p>在微信小程序中，web-view 组件用于嵌入网页内容。 它可以加载并显示一个网页，适用于在小程序中展示外部链接的内容，如活动页、资讯页等。 下面是一些关于如何在微信小程序中使用 web-view 组件的详细信息。</p><p><strong>使用方法</strong></p><ol><li>引入 web-view 组件:<br> 在小程序的 <code>wxml</code> 文件中使用 web-view 组件，并设置 <code>src</code> 属性为要加载的网页 URL。<div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token comment">&lt;!-- pages/webview/webview.wxml --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-view</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.example.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-view</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>配置小程序域名:<br> 在微信小程序中使用 web-view 组件时，必须在小程序管理后台的“业务域名”中配置允许加载的域名。否则，网页内容将无法加载。</li></ol><p>配置路径：微信公众平台 -&gt; 小程序 -&gt; 设置 -&gt; 业务域名</p><p><strong>示例</strong></p><p>假设我们有一个小程序页面 webview，需要在这个页面中展示一个外部网页</p><ol><li>创建页面:<br> 创建一个新的页面目录 <code>pages/webview/</code>，并在其中创建以下文件： <ul><li><code>webview.wxml</code></li><li><code>webview.js</code></li><li><code>webview.json</code></li><li><code>webview.wxss</code></li></ul></li><li>编写 <code>webview.wxml</code> 文件:<div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line"><span class="token comment">&lt;!-- pages/webview/webview.wxml --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-view</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.example.com<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-view</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>编写 <code>webview.js</code> 文件（可选）:<br> 如果需要在页面加载时做一些操作，可以在 <code>webview.js</code> 文件中添加相应的逻辑。<div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre class="language-html"><code><span class="line">// pages/webview/webview.js</span>
<span class="line">Page({</span>
<span class="line">  onLoad(options) {</span>
<span class="line">    console.log(&#39;Webview page loaded&#39;);</span>
<span class="line">  }</span>
<span class="line">});</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>编写 <code>webview.json</code> 文件:<br> 配置页面的窗口属性，如标题。<div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;navigationBarTitleText&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Web View Page&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>编写 <code>webview.wxss</code> 文件（可选）:添加样式<div class="language-css line-numbers-mode" data-highlighter="prismjs" data-ext="css" data-title="css"><pre class="language-css"><code><span class="line"><span class="token comment">/* pages/webview/webview.wxss */</span></span>
<span class="line"><span class="token selector">web-view</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="line">  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>在 <code>app.json</code> 中注册页面:<br> 在小程序的全局配置文件 app.json 中注册新创建的页面。<div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre class="language-json"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;pages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">    <span class="token string">&quot;pages/index/index&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;pages/webview/webview&quot;</span></span>
<span class="line">  <span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>注意事项</strong></p><p><strong>域名白名单</strong>: 只有在微信公众平台上配置了的业务域名才能在 web-view 中加载，未配置的域名会被拦截。<br><strong>安全性</strong>: 注意加载的网页内容的安全性，避免加载不可信的外部内容，以防止安全问题。<br><strong>通过使用</strong> web-view 组件，微信小程序可以轻松嵌入和展示外部网页内容，提供了更大的灵活性来展示动态和复杂的网页信息。</p>`,15),l=[t];function p(o,c){return a(),n("div",null,l)}const d=s(i,[["render",p],["__file","webview.html.vue"]]),u=JSON.parse('{"path":"/base/webview.html","title":"","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1720534286000,"contributors":[{"name":"BaronYan","email":"1229598328@qq.com","commits":1}]},"filePathRelative":"base/webview.md","excerpt":"<p>Webview 是一种嵌入式浏览器组件，\\n用于在移动应用程序或桌面应用程序中显示网页内容。\\n它允许开发者在应用程序内嵌入和显示网页，而无需切换到独立的浏览器应用程序。\\nWebview 常用于展示静态网页、动态内容、或者与服务器交互的内容。</p>\\n<p><strong>主要特点和用途</strong></p>\\n<ul>\\n<li><strong>嵌入网页内容</strong>: 开发者可以在应用程序内嵌入网页，无需打开外部浏览器。</li>\\n<li><strong>跨平台支持</strong>: Webview 在 Android、iOS、Windows 和 macOS 等平台上都得到广泛支持。</li>\\n<li><strong>与原生代码交互</strong>: Webview 可以通过 JavaScript 与应用程序的原生代码交互，允许双向通信。</li>\\n<li><strong>展示动态内容</strong>: 适用于需要展示实时更新内容的场景，如新闻、社交媒体、数据可视化等。</li>\\n</ul>"}');export{d as comp,u as data};
