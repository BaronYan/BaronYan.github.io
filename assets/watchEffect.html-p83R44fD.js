import{_ as n,c as s,o as a,d as t}from"./app-Bo2zPjj5.js";const p={},e=t(`<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>watchEffect 是 Vue 3 中一个新的响应性 API，属于 Composition API 的一部分。 它提供了一种简单的方法来自动跟踪响应式状态的变化，并在这些变化发生时执行副作用。 相比于传统的 watch 选项，watchEffect 更加直接和易于使用，特别是当你只需要执行一些简单的副作用时。</p><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h3><h4 id="创建一个简单的副作用" tabindex="-1"><a class="header-anchor" href="#创建一个简单的副作用"><span>创建一个简单的副作用</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watchEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">count has changed to: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>count<span class="token punctuation">.</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，watchEffect 会自动跟踪 count 的变化，并在 <code>count.value</code> 改变时执行传入的回调函数。每次 <code>count.value</code> 发生变化时，控制台都会输出新的值。</p><h3 id="特性与优点" tabindex="-1"><a class="header-anchor" href="#特性与优点"><span>特性与优点</span></a></h3><ol><li><strong>自动依赖追踪</strong>： <ul><li>watchEffect 会自动追踪在其回调函数中使用的所有响应式状态。这意味着你不需要显式地声明要监视的依赖项，Vue 会自动完成这一点。</li></ul></li><li><strong>立即执行</strong>： <ul><li>watchEffect 在创建时会立即执行一次回调函数。这使得你可以在组件挂载时立即执行某些逻辑，而不需要等待状态发生变化。</li></ul></li><li><strong>清理功能</strong>： <ul><li>watchEffect 提供了一个清理机制，允许你在每次副作用重新执行之前执行一些清理操作。例如，在处理异步操作或订阅时，这个功能非常有用。</li></ul></li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watchEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">onCleanup</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">onCleanup</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>onCleanup</code> 函数被用来清除定时器，以防止内存泄漏或其他副作用。</p><h3 id="与-watch-的比较" tabindex="-1"><a class="header-anchor" href="#与-watch-的比较"><span>与 watch 的比较</span></a></h3><p>虽然 watchEffect 和 watch 都用于响应状态变化，但它们有一些关键的区别：</p><ol><li>依赖追踪： <ul><li>watchEffect：自动追踪依赖。</li><li>watch：需要显式声明依赖。</li></ul></li><li>使用场景： <ul><li>watchEffect：适用于简单的副作用，当依赖关系不明确或不想显式声明时使用。</li><li>watch：适用于更复杂的情况，需要对依赖项进行更细粒度的控制。</li></ul></li></ol><h4 id="watch-示例" tabindex="-1"><a class="header-anchor" href="#watch-示例"><span>watch 示例</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> count <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">watch</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">count changed from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>oldValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newValue<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">count<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，watch 需要显式地传入要监视的响应式状态 count，并在回调函数中处理新旧值。</p><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><p>watchEffect 是一个强大且易用的工具，适用于大多数简单的副作用场景。 当你需要处理更复杂的情况或对依赖项进行精确控制时，可以使用 watch。 通过组合这两种 API，Vue 3 提供了灵活且高效的响应式状态管理解决方案。</p>`,18),c=[e];function l(o,i){return a(),s("div",null,c)}const r=n(p,[["render",l],["__file","watchEffect.html.vue"]]),k=JSON.parse('{"path":"/vue3/watchEffect.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]},{"level":3,"title":"特性与优点","slug":"特性与优点","link":"#特性与优点","children":[]},{"level":3,"title":"与 watch 的比较","slug":"与-watch-的比较","link":"#与-watch-的比较","children":[]},{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}]}],"git":{"updatedTime":1721487377000,"contributors":[{"name":"BaronYan","email":"1229598328@qq.com","commits":1}]},"filePathRelative":"vue3/watchEffect.md","excerpt":"<h2>简介</h2>\\n<p>watchEffect 是 Vue 3 中一个新的响应性 API，属于 Composition API 的一部分。\\n它提供了一种简单的方法来自动跟踪响应式状态的变化，并在这些变化发生时执行副作用。\\n相比于传统的 watch 选项，watchEffect 更加直接和易于使用，特别是当你只需要执行一些简单的副作用时。</p>\\n<h3>基本用法</h3>\\n<h4>创建一个简单的副作用</h4>\\n<div class=\\"language-javascript\\" data-highlighter=\\"prismjs\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">import</span> <span class=\\"token punctuation\\">{</span> ref<span class=\\"token punctuation\\">,</span> watchEffect <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">from</span> <span class=\\"token string\\">\'vue\'</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">const</span> count <span class=\\"token operator\\">=</span> <span class=\\"token function\\">ref</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">0</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token function\\">watchEffect</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token template-string\\"><span class=\\"token template-punctuation string\\">`</span><span class=\\"token string\\">count has changed to: </span><span class=\\"token interpolation\\"><span class=\\"token interpolation-punctuation punctuation\\">${</span>count<span class=\\"token punctuation\\">.</span>value<span class=\\"token interpolation-punctuation punctuation\\">}</span></span><span class=\\"token template-punctuation string\\">`</span></span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\">count<span class=\\"token punctuation\\">.</span>value<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"></span></code></pre></div>"}');export{r as comp,k as data};
