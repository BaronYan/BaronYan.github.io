import{_ as a,c as n,o as s,d as e}from"./app-9W7H9lks.js";const t={},p=e(`<p><code>updateOrCreate</code> 是Laravel Eloquent ORM提供的一个非常有用的方法。</p><p>这个方法结合了更新和创建操作,使得在不确定记录是否存在的情况下更新或创建记录变得非常简单。</p><p>以下是 <code>updateOrCreate</code> 方法的基本用法和工作原理:</p><h2 id="基本语法" tabindex="-1"><a class="header-anchor" href="#基本语法"><span>基本语法</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token class-name static-context">Model</span><span class="token operator">::</span><span class="token function">updateOrCreate</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token comment">/* 用于查找的条件 */</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token comment">/* 需要更新或创建的数据 */</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span>工作原理</span></a></h2><ol><li>首先,<code>updateOrCreate</code> 方法会根据第一个数组参数中的条件在数据库中查找记录。</li><li>如果找到匹配的记录,它会使用第二个数组参数中的数据更新这条记录。</li><li>如果没有找到匹配的记录,它会创建一个新记录,同时使用两个数组参数中的所有数据。</li></ol><h2 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h2><p><code>updateOrCreate</code> 方法会返回一个模型实例。具体来说：</p><ul><li>返回值类型：返回的是一个 Eloquent 模型实例</li><li>返回内容： <ul><li>如果记录被更新：返回更新后的已存在记录的模型实例。</li><li>如果新记录被创建：返回新创建的记录的模型实例。</li></ul></li></ul><h2 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h2><ul><li>第一个数组参数用于确定唯一性,通常应该包含主键或唯一索引字段</li><li>第二个数组参数包含要更新或插入的数据。如果是更新操作,只有这个数组中的字段会被更新</li></ul>`,12),l=[p];function c(i,o){return s(),n("div",null,l)}const d=a(t,[["render",c],["__file","orm_updateOrCreate.html.vue"]]),u=JSON.parse('{"path":"/laravel/orm_updateOrCreate.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"基本语法","slug":"基本语法","link":"#基本语法","children":[]},{"level":2,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":2,"title":"返回值","slug":"返回值","link":"#返回值","children":[]},{"level":2,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"laravel/orm_updateOrCreate.md","excerpt":"<p><code>updateOrCreate</code> 是Laravel Eloquent ORM提供的一个非常有用的方法。</p>\\n<p>这个方法结合了更新和创建操作,使得在不确定记录是否存在的情况下更新或创建记录变得非常简单。</p>\\n<p>以下是 <code>updateOrCreate</code> 方法的基本用法和工作原理:</p>\\n<h2>基本语法</h2>\\n<div class=\\"language-php\\" data-highlighter=\\"prismjs\\" data-ext=\\"php\\" data-title=\\"php\\"><pre class=\\"language-php\\"><code><span class=\\"line\\"><span class=\\"token class-name static-context\\">Model</span><span class=\\"token operator\\">::</span><span class=\\"token function\\">updateOrCreate</span><span class=\\"token punctuation\\">(</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">[</span><span class=\\"token comment\\">/* 用于查找的条件 */</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">,</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">[</span><span class=\\"token comment\\">/* 需要更新或创建的数据 */</span><span class=\\"token punctuation\\">]</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre></div>"}');export{d as comp,u as data};
