import{_ as n,c as s,o as a,d as e}from"./app-Bt4432Uc.js";const t={},p=e(`<h1 id="migration-基础认知" tabindex="-1"><a class="header-anchor" href="#migration-基础认知"><span>migration 基础认知</span></a></h1><h2 id="外键约束" tabindex="-1"><a class="header-anchor" href="#外键约束"><span>外键约束</span></a></h2><p>Laravel 还支持创建外键约束，用于在数据库级别强制引用完整性。</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">unsignedBigInteger</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">foreign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">references</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>由于此语法相当冗长，Laravel 提供了额外的、更简洁的方法，这些方法使用约定来提供更好的开发人员体验。<br> 使用 <code>foreignId</code> 方法创建列时，上面的示例可以重写如下：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">foreignId</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">constrained</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>foreignId</code> 方法会创建一个<code>UNSIGNED BIGINT</code> 等效列，</li><li>同时 <code>constrained</code> 方法会使用约定来确定所引用的表和列。 <ul><li>如果您的表名与 Laravel 的约定不符，您可以手动将其提供给该constrained方法。</li><li>此外，还可以指定应分配给生成的索引的名称：</li></ul></li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">foreignId</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">constrained</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token argument-name">table</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">,</span> <span class="token argument-name">indexName</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">&#39;posts_user_id&#39;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以为约束的“删除时”和“更新时”属性指定所需的操作：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">foreignId</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">constrained</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">onUpdate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cascade&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">onDelete</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cascade&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>对于这些操作，还提供了一种替代的、富有表现力的语法：</p><ul><li><code>$table-&gt;cascadeOnUpdate();</code> 更新应级联。</li><li><code>$table-&gt;restrictOnUpdate();</code> 应该限制​​更新。</li><li><code>$table-&gt;noActionOnUpdate();</code> 未对更新采取任何行动。</li><li><code>$table-&gt;cascadeOnDelete();</code> 删除应该级联。</li><li><code>$table-&gt;restrictOnDelete();</code> 删除应该受到限制。</li><li><code>$table-&gt;nullOnDelete();</code> 删除时应将外键值设置为空。</li></ul><p>任何附加的列修饰符都必须在<code>constrained()</code>方法之前调用：<br><code>$table-&gt;foreignId(&#39;user_id&#39;)-&gt;nullable()-&gt;constrained();</code></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">foreign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">references</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;companies&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">onDelete</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cascade&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">onUpdate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cascade&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="foreign" tabindex="-1"><a class="header-anchor" href="#foreign"><span>foreign()</span></a></h3><p><code>$table-&gt;foreign()</code> 方法用于在数据库中创建外键约束。</p><p>这个方法的主要功能包括：</p><ol><li><strong>建立表间关系</strong>：它定义了当前表中的一个字段与另一个表中的字段之间的关系。</li><li><strong>确保数据完整性</strong>：通过外键约束，可以防止在子表中插入无效的数据。</li><li><strong>定义级联操作</strong>：可以指定当主表中的记录被<strong>更新或删除</strong>时，子表中相关记录应该如何处理。</li></ol><p>具体到您的代码：</p><ol><li><code>foreign(&#39;company_id&#39;)</code>：将 <code>company_id</code> 字段设置为外键。</li><li><code>references(&#39;id&#39;)</code>：指定这个外键引用的是另一个表的 <code>id</code> 字段。</li><li><code>on(&#39;companies&#39;)</code>：指定被引用的表是 <code>companies</code> 表。</li><li><code>onDelete(&#39;cascade&#39;)</code>：当 <code>companies</code> 表中的记录被删除时，相关的 <code>warehouses</code> 记录也会被自动删除。</li><li><code>onUpdate(&#39;cascade&#39;)</code>：当 <code>companies</code> 表中的 <code>id</code> 更新时，<code>warehouses</code> 表中相应的 <code>company_id</code> 也会自动更新。</li></ol><p>总的来说，<code>$table-&gt;foreign()</code> 方法帮助我们在数据库层面建立和维护表之间的关系，确保数据的一致性和完整性。</p><h3 id="外键可空" tabindex="-1"><a class="header-anchor" href="#外键可空"><span>外键可空</span></a></h3><p>为了确保 <code>company_id</code> 字段不为空，您需要在定义外键之前添加 <code>unsignedBigInteger</code> 方法并使用 <code>nullable(false)</code> 或直接不使用 <code>nullable()</code>。以下是修改建议：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">unsignedBigInteger</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果设置成 -&gt;nullable() 则表明该字段可为空</span></span>
<span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">foreign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">references</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;companies&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">onDelete</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cascade&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">onUpdate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cascade&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>在主表记录被删除时，将外键设置为 null</strong></p><p>在主表（companies）的记录被删除时，将子表（warehouses）中对应的外键（company_id）设置为 null，而不是删除子表中的记录。这种操作称为&quot;SET NULL&quot;。 要实现这个需求，您需要做以下修改：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">unsignedBigInteger</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">nullable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">foreign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">references</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;companies&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">onDelete</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;set null&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的变化是：</p><ol><li>确保 company_id 字段允许为 null：<code>-&gt;nullable()</code></li><li>在外键定义中，将 <code>onDelete(&#39;cascade&#39;)</code> 改为 <code>onDelete(&#39;set null&#39;)</code></li><li>移除了 <code>onUpdate(&#39;cascade&#39;)</code>，因为通常不需要在更新时进行级联操作</li></ol><p>这样设置后，当 companies 表中的一条记录被删除时，warehouses 表中相关记录的 <code>company_id</code> 将被设置为 null，而不是删除整条记录。 请注意，这种设置要求 <code>company_id</code> 字段必须允许为 <code>null</code>，否则会导致数据库错误。如果您之前没有将 <code>company_id</code> 设置为可空，请确保添加 <code>-&gt;nullable()</code> 修饰符。</p><h3 id="nullondelete" tabindex="-1"><a class="header-anchor" href="#nullondelete"><span>nullOnDelete()</span></a></h3><p>在 Laravel 中，<code>-&gt;onDelete(&#39;set null&#39;)</code> 确实有一个简写的方法。您可以使用 <code>-&gt;nullOnDelete()</code> 来代替。这是一个更简洁的语法糖，实现相同的功能。</p><h3 id="cascade" tabindex="-1"><a class="header-anchor" href="#cascade"><span>cascade</span></a></h3><p><strong>以上代码中的 cascade 是什么意思，他是 sql语句中的语法吗？</strong></p><p>是的，&quot;cascade&quot; 是 SQL 语句中的一个关键词，用于定义外键约束的行为。生变化时，相关联的子表中的记录应该如何处理。</p><p>&quot;cascade&quot; 的含义是&quot;级联&quot;，主要用于以下两种情况：</p><ul><li><code>ON DELETE CASCADE</code>：当主表中的记录被删除时，子表中所有关联的记录也会被自动删除。</li><li><code>ON UPDATE CASCADE</code>：当主表中的主键被更新时，子表中所有关联记录的外键值也会自动更新。</li></ul><p>在 SQL 中，这些约束可能看起来像这样：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre class="language-sql"><code><span class="line"><span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>company_id<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> companies<span class="token punctuation">(</span>id<span class="token punctuation">)</span> </span>
<span class="line"><span class="token keyword">ON</span> <span class="token keyword">DELETE</span> <span class="token keyword">CASCADE</span> </span>
<span class="line"><span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CASCADE</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Laravel 的迁移文件中，这些 SQL 概念被封装成了更易读的方法：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">foreign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">references</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;companies&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">onDelete</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cascade&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">-&gt;</span><span class="token function">onUpdate</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cascade&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&quot;cascade&quot; 只是可能的选项之一。其他常见选项包括：</p><ul><li><code>SET NULL</code>：将外键设置为 NULL（在 Laravel 中可以用 <code>nullOnDelete()</code> 简写）</li><li><code>RESTRICT</code>：阻止删除或更新主表中的记录（这通常是默认行为）</li><li><code>NO ACTION</code>：类似于 <code>RESTRICT</code>，但检查是在事务结束时进行的</li></ul><p>选择哪种方式取决于您的具体业务需求和数据完整性要求。</p><h3 id="constrained" tabindex="-1"><a class="header-anchor" href="#constrained"><span>constrained()</span></a></h3><p><code>constrained()</code> 方法是 Laravel 迁移中的一个便捷方法，用于自动创建外键约束。它的作用如下：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">foreignUlid</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">constrained</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li>自动推断被引用的表名： <ul><li>默认情况下，它会将字段名（在这个例子中是 <code>user_id</code>）转换为复数形式，并假设这就是被引用的表名（即 users）。</li></ul></li><li>自动推断被引用的列名： <ul><li>默认假设被引用的列是 id。</li></ul></li><li>创建外键约束： <ul><li>它会自动创建一个外键，将 <code>user_id</code> 关联到 <code>users</code> 表的 <code>id</code> 列。</li></ul></li></ol><p>所以，<code>$table-&gt;foreignId(&#39;user_id&#39;)-&gt;constrained()</code> 相当于：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">unsignedBigInteger</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">foreign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">references</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>constrained()</code> 的优点是代码更简洁，而且如果您遵循 Laravel 的命名约定，它可以自动处理大部分情况。 如果您需要指定不同的表名或列名，可以这样使用：<br><code>$table-&gt;foreignId(&#39;user_id&#39;)-&gt;constrained(&#39;customers&#39;, &#39;user_id&#39;);</code></p><p>这里 <code>constrained()</code> 方法的第一个参数是<strong>表名</strong>，第二个参数是<strong>列名</strong>。<br> 最后，<code>onDelete(&#39;cascade&#39;)</code> 指定了当关联的用户被删除时，相应的地址记录也会被删除。<br> 总的来说，<code>constrained()</code> 方法使得创建外键约束变得更加简单和符合惯例。</p><h3 id="foreign、foreignid、foreignulid-有什么区别" tabindex="-1"><a class="header-anchor" href="#foreign、foreignid、foreignulid-有什么区别"><span>foreign、foreignId、foreignUlid 有什么区别</span></a></h3><p><code>foreign</code>、<code>foreignId</code> 和 <code>foreignUlid</code> 这三个方法在 Laravel 的数据库迁移中用于创建外键关系，但它们有一些重要的区别：</p><ol><li><code>foreign()</code><ul><li>最基本的外键创建方法。</li><li>可以用于任何类型的列。</li><li>需要先创建列，然后再定义外键关系。</li></ul></li></ol><p>示例：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"> <span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">unsignedBigInteger</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">foreign</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;user_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">references</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;users&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><code>foreignId()</code><ul><li>创建一个 UNSIGNED BIGINT 类型的列，并准备将其作为外键。</li><li>默认情况下，假设引用的是另一个表的 id 列。</li><li>可以直接链接 <code>constrained()</code> 方法来简化外键定义。</li></ul></li></ol><p>示例：<code> $table-&gt;foreignId(&#39;user_id&#39;)-&gt;constrained();</code></p><ol start="3"><li><code>foreignUlid()</code><ul><li>创建一个 CHAR(26) 类型的列，用于存储 ULID（Universally Unique Lexicographically Sortable Identifier）。</li><li>ULID 是一种类似 UUID 的标识符，但可以按字典顺序排序。</li><li>适用于使用 ULID 作为主键的表。</li></ul></li></ol><p>示例：<code>$table-&gt;foreignUlid(&#39;user_id&#39;)-&gt;constrained();</code></p><p><strong>主要区别：</strong></p><ul><li><code>foreign()</code> 最灵活，可用于任何类型的外键列。</li><li><code>foreignId()</code> 专门用于整数类型的 ID，通常是自增主键。</li><li><code>foreignUlid()</code> 专门用于 ULID 类型的 ID，适用于使用 ULID 作为主键的情况。</li></ul><p><code>foreignId()</code> 和 <code>foreignUlid()</code> 都提供了更简洁的语法，并且可以直接链接 <code>constrained()</code> 方法，使得创建外键关系更加方便。选择使用哪种方法主要取决于您的主键类型和数据库设计。</p><h2 id="联合主键" tabindex="-1"><a class="header-anchor" href="#联合主键"><span>联合主键</span></a></h2><p>Eloquent 要求每个模型至少有一个唯一标识“ID”，可用作其主键。 Eloquent 模型不支持“复合”主键。 但是，除了表的唯一标识主键之外，您还可以自由地向数据库表添加其他多列唯一索引。</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token comment">// 添加了 company_id 外键</span></span>
<span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">foreignId</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">constrained</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">onDelete</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;cascade&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建联合主键</span></span>
<span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">primary</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 确保每个公司内的 email 唯一</span></span>
<span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;email&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 确保每个公司内的 code 唯一</span></span>
<span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">unique</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;code&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码确保了</p><ul><li>每个用户都属于一个公司。</li><li>用户的 ID 和公司 ID 共同构成主键。</li><li>在同一公司内，email 和 code 都是唯一的。</li><li>当公司被删除时，该公司的所有用户也会被删除（通过 <code>onDelete(&#39;cascade&#39;)</code>）。</li></ul><p>请注意，这种设计假设一个用户只能属于一个公司。如果您需要允许用户属于多个公司，那么您可能需要考虑创建一个单独的 <code>company_user</code> 关联表。 另外，由于我们使用了联合主键，您可能需要调整一些 Eloquent 模型的设置，例如在 User 模型中：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$primaryKey</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token variable">$incrementing</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token variable">$keyType</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;string&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的设置确保了 Eloquent 能正确处理复合主键。</p><h3 id="主键" tabindex="-1"><a class="header-anchor" href="#主键"><span>主键</span></a></h3><p>Eloquent 还会假定每个模型对应的数据库表都有一个名为 <code>id</code> 的主键列。</p><ul><li>如有必要，你可以在模型上定义一个受保护的 <code>$primaryKey</code> 属性，以指定作为模型主键的不同列</li><li>此外，Eloquent 假定主键是一个递增的整数值，这意味着 Eloquent 会自动将主键转换为整数。</li><li>如果您希望使用非递增或非数字主键，则必须在模型上定义一个公共属性 <code>$incrementing</code>，并将其设置为 <code>false</code>：<code>public $incrementing = false;</code></li><li>如果模型的主键不是整数，则应在模型上定义受保护的 <code>$keyType</code> 属性。此属性应具有以下值：<code>string</code></li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token keyword">protected</span> <span class="token variable">$primaryKey</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;flight_id&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">protected</span> <span class="token variable">$primaryKey</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ulid" tabindex="-1"><a class="header-anchor" href="#ulid"><span>ulid()</span></a></h2><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">ulid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">primary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>中 <code>ulid()</code> 之后有没有必要在执行 <code>primary()</code> ?</p><p>您提出了一个很好的问题。实际上，在使用 <code>ulid()</code> 方法后，通常不需要再调用 <code>primary()</code> 方法。<br> 让我解释一下原因：</p><ol><li><code>ulid()</code> 方法的行为： <ul><li>在 Laravel 中，<code>$table-&gt;ulid()</code> 方法会自动将该列设置为主键。</li><li>它等同于 <code>$table-&gt;ulid(&#39;id&#39;)-&gt;primary()</code>。</li></ul></li><li>隐式主键设置： <ul><li>当您使用 <code>ulid()</code> 方法时，Laravel 会自动将该列视为表的主键。</li><li>这是因为 ULID（Universally Unique Lexicographically Sortable Identifier）通常用作主键。</li></ul></li></ol><p>因此，您的代码可以简化为：<code>$table-&gt;ulid();</code></p><p>这行代码就足以创建一个 ULID 类型的主键列。<br> 然而，有几点需要注意：</p><ol><li>显式声明： <ul><li>虽然不是必需的，但有时为了代码的清晰性，开发者可能会选择显式地调用 <code>primary()</code>。</li><li>这不会造成任何问题，只是重复了已经隐含的设置。</li></ul></li><li>自定义列名： <ul><li>如果您想使用不同于默认的 &#39;id&#39; 作为列名，您可以这样做：<code>$table-&gt;ulid(&#39;custom_id&#39;)-&gt;primary();</code></li></ul></li><li>复合主键： <ul><li>如果您需要创建复合主键（包括 ULID 和其他列），那么您确实需要显式地调用 <code>primary()</code>：</li></ul><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">ulid</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">foreignId</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">primary</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;id&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><strong>总结：</strong></p><ul><li>对于单一的 ULID 主键，<code>$table-&gt;ulid()</code>; 就足够了。</li><li>对于更复杂的主键设置，或者为了代码的明确性，您可以选择显式地调用 <code>primary()</code>。</li><li>在您的情况下，如果 ULID 是唯一的主键，可以简单地使用 <code>$table-&gt;ulid();</code>。</li></ul>`,86),l=[p];function o(i,c){return a(),s("div",null,l)}const d=n(t,[["render",o],["__file","migration.html.vue"]]),u=JSON.parse(`{"path":"/laravel/migration.html","title":"migration 基础认知","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"外键约束","slug":"外键约束","link":"#外键约束","children":[{"level":3,"title":"foreign()","slug":"foreign","link":"#foreign","children":[]},{"level":3,"title":"外键可空","slug":"外键可空","link":"#外键可空","children":[]},{"level":3,"title":"nullOnDelete()","slug":"nullondelete","link":"#nullondelete","children":[]},{"level":3,"title":"cascade","slug":"cascade","link":"#cascade","children":[]},{"level":3,"title":"constrained()","slug":"constrained","link":"#constrained","children":[]},{"level":3,"title":"foreign、foreignId、foreignUlid 有什么区别","slug":"foreign、foreignid、foreignulid-有什么区别","link":"#foreign、foreignid、foreignulid-有什么区别","children":[]}]},{"level":2,"title":"联合主键","slug":"联合主键","link":"#联合主键","children":[{"level":3,"title":"主键","slug":"主键","link":"#主键","children":[]}]},{"level":2,"title":"ulid()","slug":"ulid","link":"#ulid","children":[]}],"git":{"updatedTime":1725757698000,"contributors":[{"name":"BaronYan","email":"1229598328@qq.com","commits":6}]},"filePathRelative":"laravel/migration.md","excerpt":"\\n<h2>外键约束</h2>\\n<p>Laravel 还支持创建外键约束，用于在数据库级别强制引用完整性。</p>\\n<div class=\\"language-php\\" data-highlighter=\\"prismjs\\" data-ext=\\"php\\" data-title=\\"php\\"><pre class=\\"language-php\\"><code><span class=\\"line\\"><span class=\\"token variable\\">$table</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">unsignedBigInteger</span><span class=\\"token punctuation\\">(</span><span class=\\"token string single-quoted-string\\">'user_id'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token variable\\">$table</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">foreign</span><span class=\\"token punctuation\\">(</span><span class=\\"token string single-quoted-string\\">'user_id'</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">references</span><span class=\\"token punctuation\\">(</span><span class=\\"token string single-quoted-string\\">'id'</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">on</span><span class=\\"token punctuation\\">(</span><span class=\\"token string single-quoted-string\\">'users'</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre></div>"}`);export{d as comp,u as data};
