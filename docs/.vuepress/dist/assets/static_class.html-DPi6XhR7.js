import{_ as s,c as n,o as a,d as e}from"./app-T1fo0xWa.js";const t={},l=e(`<h1 id="reflection-new-reflectionclass-static-class-是什么意思" tabindex="-1"><a class="header-anchor" href="#reflection-new-reflectionclass-static-class-是什么意思"><span><code>$reflection = new ReflectionClass(static::class);</code> 是什么意思？</span></a></h1><p>这行代码使用了 PHP 的反射 API 来创建一个 <code>ReflectionClass</code> 对象。让我详细解释一下：</p><ol><li><code>ReflectionClass</code> 是 PHP 反射 API 的一部分。它允许我们在运行时检查和操作类的结构和属性。</li><li><code>static::class</code> 是一个后期静态绑定的用法。在 trait 中，它指向使用这个 trait 的类。</li><li><code>new ReflectionClass(static::class)</code> 创建了一个代表使用这个 trait 的类的 <code>ReflectionClass</code> 实例。</li></ol><p>这行代码的目的是：</p><ol><li>动态获取使用这个 trait 的类的信息。</li><li>允许我们检查这个类是否定义了某个常量（在这个场景中是 SORT_COLUMN 或 COMPANY_COLUMN）。</li></ol><p>使用反射的原因是：</p><ol><li>灵活性：它允许我们在运行时检查类的结构，而不需要硬编码任何特定的类名。</li><li>通用性：这个 trait 可以被任何类使用，反射让我们能够适应不同类的结构。</li><li>安全性：它提供了一种安全的方式来检查常量是否存在，避免了直接访问可能不存在的常量时产生的错误。</li></ol><p>在这个具体的用例中，我们使用 ReflectionClass 来检查使用这个 trait 的类是否定义了特定的常量，从而决定使用哪个排序列或公司 ID 列的名称。这种方法使得 trait 更加灵活，可以适应不同类的需求。</p><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h2><p>反射概念确实不太容易掌握。让我们用一个简单的比喻来解释反射:</p><p>想象你有一个神奇的镜子。这个镜子不仅能照出物体的外表,还能让你看到物体的内部结构。</p><p>在编程中,代码就像是各种物体。平常我们只能看到和使用代码的外部接口,就像只能看到物体的外表。</p><p>但有了反射这面&quot;神奇镜子&quot;,我们就能:</p><ol><li>看到代码的内部结构 - 比如类有哪些属性和方法。</li><li>操作通常无法直接访问的部分 - 比如调用私有方法。</li><li>动态地创建和修改代码 - 就像魔法般地改变镜子里物体的样子。</li><li>获取代码的元信息 - 比如方法的参数类型、注释等。</li></ol><p>反射让我们能在运行时&quot;反观&quot;代码本身,了解和操作代码的结构,这在某些高级编程场景下非常有用。</p><p>虽然概念听起来很抽象,但通过实际使用,你会慢慢体会到反射的强大之处。</p><p>重要的是要记住,反射就像是一种能让我们深入了解和操作代码内部的工具。</p><h3 id="为什么是-在运行时-反观-代码本身" tabindex="-1"><a class="header-anchor" href="#为什么是-在运行时-反观-代码本身"><span>为什么是 在运行时&quot;反观&quot;代码本身</span></a></h3><p>您提出了一个非常好的问题。&quot;在运行时&#39;反观&#39;代码本身&quot;这个概念确实需要进一步解释。让我们深入探讨一下：</p><ol><li>编译时 vs 运行时： <ul><li>编译时：代码被转换成机器可执行的形式。这时，很多关于代码结构的信息可能会丢失。</li><li>运行时：程序实际执行的时候。通常，程序只是按照预定的逻辑运行，不需要知道自己的结构。</li></ul></li><li>为什么是&quot;运行时&quot;： <ul><li>动态性：有些信息只有在程序运行时才能确定。比如，通过用户输入或配置文件来决定使用哪个类。</li><li>灵活性：允许程序根据实际情况做出决策，而不是在编写代码时就固定everything。</li></ul></li><li>为什么&quot;反观&quot;： <ul><li>自省：程序能够检查自己的结构和状态。就像人类的自我意识。</li><li>元编程：代码可以生成、修改或操作其他代码。</li></ul></li></ol><p><strong>实际例子</strong>：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token keyword">class</span> <span class="token class-name-definition class-name">MyClass</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token variable">$secretData</span> <span class="token operator">=</span> <span class="token string double-quoted-string">&quot;secret&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$reflection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$property</span> <span class="token operator">=</span> <span class="token variable">$reflection</span><span class="token operator">-&gt;</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;secretData&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$property</span><span class="token operator">-&gt;</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">echo</span> <span class="token variable">$property</span><span class="token operator">-&gt;</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出 &quot;secret&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们在运行时&quot;反观&quot;了 MyClass，并访问了本应是私有的属性。</p><p><strong>应用场景</strong>：</p><ul><li>框架开发：框架需要适应各种不同的用户代码结构。</li><li>插件系统：动态加载和使用未知的代码。</li><li>单元测试：测试私有方法和属性。</li><li>序列化：将对象转换为字符串时需要知道对象的所有属性。</li></ul><p><strong>类比</strong>：</p><ul><li>想象你是一个机器人。通常你只是执行预设的程序。但反射就像给你安装了一个特殊的传感器，让你能够&quot;看到&quot;并理解你自己的程序代码，甚至在运行过程中修改它。</li><li>反射之所以强大，是因为它打破了代码的常规封装，让程序拥有了&quot;自我认知&quot;的能力。这在某些高级编程场景下非常有用，但也需要谨慎使用，因为它可能破坏代码的封装性和可预测性。</li></ul><h3 id="php-的反射-api" tabindex="-1"><a class="header-anchor" href="#php-的反射-api"><span>PHP 的反射 API</span></a></h3><p>PHP 的反射 API 是一个强大的工具，</p><ul><li>允许我们在运行时检查和操作类、接口、函数、方法和扩展。</li><li>它提供了一种方式来&quot;反射&quot;或检查 PHP 程序的结构和元素。</li></ul><p>以下是关于 PHP 反射 API 的详细解释：</p><ol><li>主要类： <ul><li>ReflectionClass: 用于检查类</li><li>ReflectionMethod: 用于检查类方法</li><li>ReflectionProperty: 用于检查类属性</li><li>ReflectionFunction: 用于检查函数</li><li>ReflectionParameter: 用于检查函数或方法的参数</li><li>ReflectionExtension: 用于检查 PHP 扩展</li></ul></li><li>主要用途： <ul><li>检查类、接口、trait 的结构</li><li>获取方法和属性的详细信息（如可见性、静态与否等）</li><li>调用不可访问的方法或获取/设置不可访问的属性</li><li>创建类的新实例</li><li>检查函数和方法的参数</li></ul></li></ol><h3 id="示例用法" tabindex="-1"><a class="header-anchor" href="#示例用法"><span>示例用法：</span></a></h3><p><strong>检查类是否有某个方法</strong>：</p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$reflection</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span><span class="token class-name static-context">MyClass</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$reflection</span><span class="token operator">-&gt;</span><span class="token function">hasMethod</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;someMethod&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 类有 someMethod 方法</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>调用私有方法</strong></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$method</span> <span class="token operator">=</span> <span class="token variable">$reflection</span><span class="token operator">-&gt;</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;privateMethod&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$method</span><span class="token operator">-&gt;</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$method</span><span class="token operator">-&gt;</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token variable">$object</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>获取方法的参数</strong></p><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$method</span> <span class="token operator">=</span> <span class="token variable">$reflection</span><span class="token operator">-&gt;</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;someMethod&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token variable">$method</span><span class="token operator">-&gt;</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>优点： 动态性：可以在运行时检查和操作代码结构 灵活性：可以与未知的或动态生成的代码交互 元编程：可以基于代码的结构自动生成代码或文档 单元测试：可以测试私有和受保护的方法和属性 注意事项： 性能开销：反射操作比直接的代码调用要慢 安全性：反射可以绕过访问控制，需要谨慎使用 复杂性：过度使用反射可能导致代码难以理解和维护 6. 实际应用场景： 依赖注入容器的实现 ORM（对象关系映射）框架 单元测试框架 插件系统 API 文档生成器 7. 在 Laravel 中的应用： Laravel 框架大量使用了反射 API，例如： 服务容器中解析依赖 路由到控制器方法的映射 模型的关联关系处理 中间件的处理 高级用法： 动态创建类：ReflectionClass::newInstanceWithoutConstructor() 修改常量值：ReflectionClass::setStaticPropertyValue() 获取注释：ReflectionClass::getDocComment() 反射 API 是一个强大的工具，但应该谨慎使用。它在某些情况下非常有用，特别是在构建框架或通用库时，但在日常应用开发中，过度使用可能导致性能问题和代码复杂性增加。 在我们的 HasCompanySort trait 中，我们使用反射 API 来灵活地检查使用该 trait 的类是否定义了特定的常量，这是反射 API 的一个恰当且有效的应用。</p>`,40),p=[l];function i(o,c){return a(),n("div",null,p)}const u=s(t,[["render",i],["__file","static_class.html.vue"]]),d=JSON.parse('{"path":"/php/static_class.html","title":"$reflection = new ReflectionClass(static::class); 是什么意思？","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[{"level":3,"title":"为什么是 在运行时\\"反观\\"代码本身","slug":"为什么是-在运行时-反观-代码本身","link":"#为什么是-在运行时-反观-代码本身","children":[]},{"level":3,"title":"PHP 的反射 API","slug":"php-的反射-api","link":"#php-的反射-api","children":[]},{"level":3,"title":"示例用法：","slug":"示例用法","link":"#示例用法","children":[]}]}],"git":{"updatedTime":1726933221000,"contributors":[{"name":"BaronYan","email":"1229598328@qq.com","commits":1}]},"filePathRelative":"php/static_class.md","excerpt":"\\n<p>这行代码使用了 PHP 的反射 API 来创建一个 <code>ReflectionClass</code> 对象。让我详细解释一下：</p>\\n<ol>\\n<li><code>ReflectionClass</code> 是 PHP 反射 API 的一部分。它允许我们在运行时检查和操作类的结构和属性。</li>\\n<li><code>static::class</code> 是一个后期静态绑定的用法。在 trait 中，它指向使用这个 trait 的类。</li>\\n<li><code>new ReflectionClass(static::class)</code> 创建了一个代表使用这个 trait 的类的 <code>ReflectionClass</code> 实例。</li>\\n</ol>"}');export{u as comp,d as data};
