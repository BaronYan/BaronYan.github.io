import{_ as n,c as s,o as a,d as t}from"./app-Bt4432Uc.js";const p={},e=t(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">batchGenerator</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> batchSize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> total<span class="token punctuation">;</span> i <span class="token operator">+=</span> batchSize<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">yield</span> <span class="token punctuation">{</span> <span class="token literal-property property">start</span><span class="token operator">:</span> i<span class="token punctuation">,</span> <span class="token literal-property property">end</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> batchSize<span class="token punctuation">,</span> total<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> batches <span class="token operator">=</span> <span class="token function">batchGenerator</span><span class="token punctuation">(</span>quantity<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> batch <span class="token keyword">of</span> batches<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 生成并打印这一批标签</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>yield</code> 是什么意思？</p><p>在这段代码中，<code>yield</code> 是 JavaScript 生成器函数（Generator Function）的一个关键字。它的作用是暂停生成器函数的执行，并返回一个值给调用者。让我详细解释一下：</p><ul><li><code>function*</code> 声明了一个生成器函数。生成器函数可以被暂停和恢复执行。</li><li><code>yield</code> 关键字用于暂停函数的执行，并返回一个值。每次调用生成器的 <code>next()</code> 方法时，函数会继续执行到下一个 <code>yield</code> 语句。</li><li>在这个例子中，<code>yield</code> 返回一个对象 <code>{ start: i, end: Math.min(i + batchSize, total) }</code>，表示当前批次的起始和结束索引。</li><li>生成器函数可以通过 <code>for...of</code> 循环进行迭代，每次迭代都会获得一个 yield 返回的值。</li><li>这个 <code>batchGenerator</code> 函数的作用是将一个大的任务（总数为 total）分割成多个小批次（每批大小为 <code>batchSize</code>）。例如，如果 total 是 250，<code>batchSize</code> 是 100，那么它会生成三个批次： <ol><li><code>{ start: 0, end: 100 }</code></li><li><code>{ start: 100, end: 200 }</code></li><li><code>{ start: 200, end: 250 }</code></li></ol></li></ul><p>使用生成器的好处是它可以惰性计算这些批次，只有在需要时才生成下一个批次，这在处理大量数据时可以提高效率和减少内存使用。</p><p>在随后的 for 循环中，每次迭代都会处理一个批次的标签，这样可以将大量的标签生成和打印任务分解成更小、更易管理的部分。</p>`,6),o=[e];function c(l,i){return a(),s("div",null,o)}const u=n(p,[["render",c],["__file","yield.html.vue"]]),k=JSON.parse('{"path":"/JavaScript/yield.html","title":"","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1726122536000,"contributors":[{"name":"BaronYan","email":"1229598328@qq.com","commits":1}]},"filePathRelative":"JavaScript/yield.md","excerpt":"<div class=\\"language-javascript\\" data-highlighter=\\"prismjs\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">function</span><span class=\\"token operator\\">*</span> <span class=\\"token function\\">batchGenerator</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">total<span class=\\"token punctuation\\">,</span> batchSize</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">let</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> total<span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">+=</span> batchSize<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">yield</span> <span class=\\"token punctuation\\">{</span> <span class=\\"token literal-property property\\">start</span><span class=\\"token operator\\">:</span> i<span class=\\"token punctuation\\">,</span> <span class=\\"token literal-property property\\">end</span><span class=\\"token operator\\">:</span> Math<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">min</span><span class=\\"token punctuation\\">(</span>i <span class=\\"token operator\\">+</span> batchSize<span class=\\"token punctuation\\">,</span> total<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">  <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">const</span> batches <span class=\\"token operator\\">=</span> <span class=\\"token function\\">batchGenerator</span><span class=\\"token punctuation\\">(</span>quantity<span class=\\"token punctuation\\">,</span> <span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"><span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">const</span> batch <span class=\\"token keyword\\">of</span> batches<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">  <span class=\\"token comment\\">// 生成并打印这一批标签</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div>"}');export{u as comp,k as data};
