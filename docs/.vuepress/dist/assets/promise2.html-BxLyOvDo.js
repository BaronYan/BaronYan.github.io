import{_ as s,c as n,o as a,d as e}from"./app-Jjiyxt7X.js";const l={},t=e(`<h1 id="详细介绍下-promise" tabindex="-1"><a class="header-anchor" href="#详细介绍下-promise"><span>详细介绍下 Promise</span></a></h1><p>Promise 是 JavaScript 中用于处理异步操作的对象。它代表了一个可能<strong>现在</strong>、<strong>未来</strong>或<strong>永远</strong>不可能完成的操作。</p><p>以下是 Promise 的主要特点和用法:</p><ol><li>状态:Promise 有三种状态: <ul><li><strong>Pending(进行中)</strong>: 初始状态,既不是成功,也不是失败状态。</li><li><strong>Fulfilled(已成功)</strong>: 表示操作成功完成。</li><li><strong>Rejected(已失败)</strong>: 表示操作失败。</li></ul></li><li>基本用法:</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 异步操作</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* 操作成功 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>链式调用:Promise 可以通过 <code>.then()</code>, <code>.catch()</code>, 和 <code>.finally()</code> 方法进行链式调用。</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">promise</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 处理成功结果</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 处理错误</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 无论成功失败都会执行</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>异步操作的组合:</li></ol><ul><li><code>Promise.all()</code>: 等待所有 promises 完成(或第一个失败)。</li><li><code>Promise.race()</code>: 等待第一个完成的 promise。</li><li><code>Promise.allSettled()</code>: 等待所有 promises 完成,无论成功失败。</li><li><code>Promise.any()</code>: 等待第一个成功的 promise。</li></ul><ol start="5"><li>异步函数:使用 <code>async/await</code> 语法可以更简洁地处理 Promise:</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> promise<span class="token punctuation">;</span></span>
<span class="line">       <span class="token comment">// 处理结果</span></span>
<span class="line">     <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token comment">// 处理错误</span></span>
<span class="line">     <span class="token punctuation">}</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>错误处理:Promise 链中的错误会沿着链向下传播,直到被捕获。</li><li>微任务队列:Promise 的回调函数会被放入微任务队列,在当前宏任务结束后立即执行。</li><li>Promise 的主要优点:</li></ol><ul><li>改善了回调地狱问题</li><li>提供了更好的错误处理机制</li><li>使异步代码更易读和维护</li><li>支持并行操作</li></ul><p>reject 和 resolve 是 Promise 对象中的两个重要概念。让我为您详细解释一下：</p><ul><li>resolve（解决）: <ul><li>代表 Promise 成功完成。</li><li>当调用 <code>resolve()</code> 时，Promise 的状态变为 &quot;fulfilled&quot;（已完成）。</li><li><code>resolve()</code> 可以传递一个值，这个值会作为 <code>.then()</code> 方法中回调函数的参数。</li></ul></li><li>reject（拒绝）: <ul><li>代表 Promise 失败或出错。</li><li>当调用 <code>reject()</code> 时，Promise 的状态变为 &quot;rejected&quot;（已拒绝）。</li><li><code>reject()</code> 通常传递一个错误对象，这个对象会作为 <code>.catch()</code> 方法中回调函数的参数。</li></ul></li></ul>`,15),i=[t];function p(o,c){return a(),n("div",null,i)}const u=s(l,[["render",p],["__file","promise2.html.vue"]]),d=JSON.parse('{"path":"/JavaScript/promise/promise2.html","title":"详细介绍下 Promise","lang":"en-US","frontmatter":{},"headers":[],"git":{"updatedTime":1726499273000,"contributors":[{"name":"BaronYan","email":"1229598328@qq.com","commits":1}]},"filePathRelative":"JavaScript/promise/promise2.md","excerpt":"\\n<p>Promise 是 JavaScript 中用于处理异步操作的对象。它代表了一个可能<strong>现在</strong>、<strong>未来</strong>或<strong>永远</strong>不可能完成的操作。</p>\\n<p>以下是 Promise 的主要特点和用法:</p>\\n<ol>\\n<li>状态:Promise 有三种状态:\\n<ul>\\n<li><strong>Pending(进行中)</strong>: 初始状态,既不是成功,也不是失败状态。</li>\\n<li><strong>Fulfilled(已成功)</strong>: 表示操作成功完成。</li>\\n<li><strong>Rejected(已失败)</strong>: 表示操作失败。</li>\\n</ul>\\n</li>\\n<li>基本用法:</li>\\n</ol>"}');export{u as comp,d as data};
