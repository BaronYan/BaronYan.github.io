import{_ as n,c as s,o as a,d as p}from"./app-1er_rJpx.js";const t={},e=p(`<h1 id="laravel-的-trait-引导机制" tabindex="-1"><a class="header-anchor" href="#laravel-的-trait-引导机制"><span>Laravel 的 trait 引导机制</span></a></h1><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token keyword">trait</span> <span class="token class-name-definition class-name">HasCompanySort</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 启动 trait</span>
<span class="line">     * 这个方法会在模型被创建时自动调用</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">bootHasCompanySort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">void</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">creating</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$model</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$model</span><span class="token operator">-&gt;</span><span class="token property">sort</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 如果没有设置 sort 值，则设置为当前公司最大的 sort 值 + 1</span></span>
<span class="line">                <span class="token variable">$model</span><span class="token operator">-&gt;</span><span class="token property">sort</span> <span class="token operator">=</span> <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;company_id&#39;</span><span class="token punctuation">,</span> <span class="token variable">$model</span><span class="token operator">-&gt;</span><span class="token property">company_id</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token operator">-&gt;</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;sort&#39;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>bootHasCompanySort</code> 被定义为静态方法有几个重要原因：</p><ol><li>Laravel 的 trait 引导机制 <ul><li>Laravel 使用一种约定，即在模型中查找名为 <code>boot{TraitName}</code> 的静态方法。这些方法会在模型引导过程中自动调用。</li></ul></li><li>生命周期考虑 <ul><li>这个方法需要在模型类被加载时执行，而不是在创建模型实例时。它设置了创建新模型实例时应用的规则。</li></ul></li><li>全局影响 <ul><li><code>bootHasCompanySort</code> 方法设置了一个影响所有使用这个 trait 的模型实例的行为。它不是针对单个实例的操作，而是针对整个类的。</li></ul></li><li>无需实例化 <ul><li>静态方法可以在不创建类实例的情况下调用。这对于设置模型的全局行为很重要，因为它需要在任何实例被创建之前就生效。</li></ul></li><li>性能考虑 <ul><li>静态方法通常比实例方法稍快一些，因为它们不需要访问实例状态。</li></ul></li></ol><h2 id="laravel-的模型事件系统" tabindex="-1"><a class="header-anchor" href="#laravel-的模型事件系统"><span>Laravel 的模型事件系统</span></a></h2><p>在这个方法中，我们使用 <code>static::creating()</code> 来注册一个模型创建事件的监听器。这个事件系统是基于类的，而不是基于实例的。</p><ul><li><code>static::creating()</code> 注册了一个在模型创建时触发的回调。</li><li>这个回调函数会在每次创建新模型实例时执行，设置 <code>sort</code> 值。</li><li>使用静态方法确保这个行为被全局应用于使用这个 trait 的所有模型。</li></ul><p>总之，<code>bootHasCompanySort</code> 被定义为静态方法是为了符合 Laravel 的约定，确保在正确的时间点执行，并全局影响使用这个 trait 的所有模型实例。这种方式使得 trait 能够无缝地集成到 Laravel 的模型生命周期中。</p>`,8),o=[e];function l(c,i){return a(),s("div",null,o)}const u=n(t,[["render",l],["__file","trait引导机制.html.vue"]]),k=JSON.parse(`{"path":"/laravel/trait%E5%BC%95%E5%AF%BC%E6%9C%BA%E5%88%B6.html","title":"Laravel 的 trait 引导机制","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Laravel 的模型事件系统","slug":"laravel-的模型事件系统","link":"#laravel-的模型事件系统","children":[]}],"git":{"updatedTime":1726933670000,"contributors":[{"name":"BaronYan","email":"1229598328@qq.com","commits":1}]},"filePathRelative":"laravel/trait引导机制.md","excerpt":"\\n<div class=\\"language-php\\" data-highlighter=\\"prismjs\\" data-ext=\\"php\\" data-title=\\"php\\"><pre class=\\"language-php\\"><code><span class=\\"line\\"><span class=\\"token keyword\\">trait</span> <span class=\\"token class-name-definition class-name\\">HasCompanySort</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">    <span class=\\"token doc-comment comment\\">/**</span>\\n<span class=\\"line\\">     * 启动 trait</span>\\n<span class=\\"line\\">     * 这个方法会在模型被创建时自动调用</span>\\n<span class=\\"line\\">     */</span></span>\\n<span class=\\"line\\">    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">function</span> <span class=\\"token function-definition function\\">bootHasCompanySort</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">:</span> <span class=\\"token keyword return-type\\">void</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">        <span class=\\"token keyword static-context\\">static</span><span class=\\"token operator\\">::</span><span class=\\"token function\\">creating</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">function</span> <span class=\\"token punctuation\\">(</span><span class=\\"token variable\\">$model</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">            <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token variable\\">$model</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token property\\">sort</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\">                <span class=\\"token comment\\">// 如果没有设置 sort 值，则设置为当前公司最大的 sort 值 + 1</span></span>\\n<span class=\\"line\\">                <span class=\\"token variable\\">$model</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token property\\">sort</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword static-context\\">static</span><span class=\\"token operator\\">::</span><span class=\\"token function\\">where</span><span class=\\"token punctuation\\">(</span><span class=\\"token string single-quoted-string\\">'company_id'</span><span class=\\"token punctuation\\">,</span> <span class=\\"token variable\\">$model</span><span class=\\"token operator\\">-&gt;</span><span class=\\"token property\\">company_id</span><span class=\\"token punctuation\\">)</span></span>\\n<span class=\\"line\\">                    <span class=\\"token operator\\">-&gt;</span><span class=\\"token function\\">max</span><span class=\\"token punctuation\\">(</span><span class=\\"token string single-quoted-string\\">'sort'</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">+</span> <span class=\\"token number\\">1</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">            <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\">        <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\">    <span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div>"}`);export{u as comp,k as data};
