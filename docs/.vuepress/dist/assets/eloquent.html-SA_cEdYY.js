import{_ as n,c as s,o as a,d as e}from"./app-DLCl2vYO.js";const t={},l=e(`<h1 id="eloquent-基本知识" tabindex="-1"><a class="header-anchor" href="#eloquent-基本知识"><span>Eloquent 基本知识</span></a></h1><h2 id="批量分配" tabindex="-1"><a class="header-anchor" href="#批量分配"><span>批量分配</span></a></h2><h3 id="create-和-firstorcreate-有哪些区别" tabindex="-1"><a class="header-anchor" href="#create-和-firstorcreate-有哪些区别"><span>create 和 firstOrCreate 有哪些区别</span></a></h3><p><code>create</code> 和 <code>firstOrCreate</code> 是 Laravel Eloquent ORM 中用于创建新记录的两个不同方法。它们有以下主要区别：</p><ol><li><code>create</code> 方法： <ul><li>总是创建一个新记录。</li><li>如果记录已存在，会创建一个重复的记录。</li><li>更快，因为它不需要先查询数据库。</li></ul></li><li><code>firstOrCreate</code> 方法： <ul><li>首先尝试查找匹配的记录。</li><li>如果找到匹配的记录，返回该记录。</li><li>如果没有找到匹配的记录，则创建一个新记录。</li><li>可以防止创建重复记录。</li><li>firstOrCreate 允许您分别指定用于查找的属性和用于创建的属性。</li></ul></li></ol><div class="language-php line-numbers-mode" data-highlighter="prismjs" data-ext="php" data-title="php"><pre class="language-php"><code><span class="line"><span class="token variable">$company</span> <span class="token operator">=</span> <span class="token class-name static-context">Company</span><span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">[</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;广州勤快货运代理有限公司&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string single-quoted-string">&#39;suffix_domain&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;qkcargo&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// ...其他字段</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token variable">$company</span> <span class="token operator">=</span> <span class="token class-name static-context">Company</span><span class="token operator">::</span><span class="token function">firstOrCreate</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;suffix_domain&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;qkcargo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 用于查找的条件</span></span>
<span class="line">    <span class="token punctuation">[</span></span>
<span class="line">        <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;广州勤快货运代理有限公司&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token comment">// ...其他字段</span></span>
<span class="line">    <span class="token punctuation">]</span> <span class="token comment">// 用于创建的属性</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),i=[l];function c(p,o){return a(),s("div",null,i)}const u=n(t,[["render",c],["__file","eloquent.html.vue"]]),d=JSON.parse('{"path":"/laravel/eloquent.html","title":"Eloquent 基本知识","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"批量分配","slug":"批量分配","link":"#批量分配","children":[{"level":3,"title":"create 和 firstOrCreate 有哪些区别","slug":"create-和-firstorcreate-有哪些区别","link":"#create-和-firstorcreate-有哪些区别","children":[]}]}],"git":{"updatedTime":1725707913000,"contributors":[{"name":"BaronYan","email":"1229598328@qq.com","commits":1}]},"filePathRelative":"laravel/eloquent.md","excerpt":"\\n<h2>批量分配</h2>\\n<h3>create 和 firstOrCreate 有哪些区别</h3>\\n<p><code>create</code> 和 <code>firstOrCreate</code> 是 Laravel Eloquent ORM 中用于创建新记录的两个不同方法。它们有以下主要区别：</p>\\n<ol>\\n<li><code>create</code> 方法：\\n<ul>\\n<li>总是创建一个新记录。</li>\\n<li>如果记录已存在，会创建一个重复的记录。</li>\\n<li>更快，因为它不需要先查询数据库。</li>\\n</ul>\\n</li>\\n<li><code>firstOrCreate</code> 方法：\\n<ul>\\n<li>首先尝试查找匹配的记录。</li>\\n<li>如果找到匹配的记录，返回该记录。</li>\\n<li>如果没有找到匹配的记录，则创建一个新记录。</li>\\n<li>可以防止创建重复记录。</li>\\n<li>firstOrCreate 允许您分别指定用于查找的属性和用于创建的属性。</li>\\n</ul>\\n</li>\\n</ol>"}');export{u as comp,d as data};
