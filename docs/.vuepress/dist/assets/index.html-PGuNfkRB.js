import{_ as s,c as n,o as a,d as e}from"./app-DIetALLr.js";const t={},p=e(`<h3 id="promise-reject" tabindex="-1"><a class="header-anchor" href="#promise-reject"><span>Promise.reject()</span></a></h3><p><code>Promise.reject()</code> 是 JavaScript 中 Promise 对象的一个静态方法，用于创建一个状态为 rejected 的 Promise 对象，并且可以指定拒绝的原因（即拒绝的理由）。</p><h4 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h5 id="参数" tabindex="-1"><a class="header-anchor" href="#参数"><span>参数</span></a></h5><ul><li><code>reason</code>：可选参数，表示 Promise 被拒绝的原因。通常是一个任意类型的值，用来描述拒绝的具体原因，比如一个 Error 对象、一个字符串或者其他任何值。</li></ul><h5 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值"><span>返回值</span></a></h5><p>一个新的 Promise 对象，状态为 rejected，并且拒绝原因为指定的 <code>reason</code>。</p><h4 id="示例用法" tabindex="-1"><a class="header-anchor" href="#示例用法"><span>示例用法</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 使用字符串作为拒绝原因：</span></span>
<span class="line"><span class="token keyword">const</span> reason <span class="token operator">=</span> <span class="token string">&#39;Something went wrong&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> rejectedPromise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">rejectedPromise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Promise rejected with reason:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Promise rejected with reason: Something went wrong</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 使用 Error 对象作为拒绝原因：</span></span>
<span class="line"><span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Custom error message&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> rejectedPromise <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">rejectedPromise<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Promise rejected with error:&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Promise rejected with error: Error: Custom error message</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h4><p><code>Promise.reject()</code> 返回的 Promise 对象的状态为 rejected，这意味着它的 .then() 方法会立即调用其第二个参数（即 rejected 状态的处理函数），而不会调用第一个参数（resolved 状态的处理函数）。 如果不提供 reason 参数，Promise.reject() 会创建一个带有 undefined 原因的 rejected Promise。 这个方法通常用于在异步操作中显式地拒绝 Promise，以便捕获错误或者控制流程。</p>`,13),c=[p];function o(i,r){return a(),n("div",null,c)}const u=s(t,[["render",o],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/JavaScript/promise/","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Promise.reject()","slug":"promise-reject","link":"#promise-reject","children":[]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"JavaScript/promise/index.md","excerpt":"<h3>Promise.reject()</h3>\\n<p><code>Promise.reject()</code> 是 JavaScript 中 Promise 对象的一个静态方法，用于创建一个状态为 rejected 的 Promise 对象，并且可以指定拒绝的原因（即拒绝的理由）。</p>\\n<h4>语法</h4>\\n<div class=\\"language-javascript\\" data-highlighter=\\"prismjs\\" data-ext=\\"js\\" data-title=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"line\\">Promise<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">reject</span><span class=\\"token punctuation\\">(</span>reason<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span></span>\\n<span class=\\"line\\"></span></code></pre></div>"}');export{u as comp,d as data};
