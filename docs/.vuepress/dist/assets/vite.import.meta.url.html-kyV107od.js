import{_ as a,c as n,o as s,d as e}from"./app-aZl8bTQd.js";const t={},p=e(`<h1 id="import-meta-url-简介" tabindex="-1"><a class="header-anchor" href="#import-meta-url-简介"><span>import.meta.url 简介</span></a></h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta" target="_blank" rel="noopener noreferrer">import.meta.url</a> 是一个 ESM 的原生功能，会暴露当前模块的 URL。 将它与原生的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/URL" target="_blank" rel="noopener noreferrer">URL</a> 构造器 组合使用，在一个 JavaScript 模块中，通过相对路径我们就能得到一个被完整解析的静态资源 URL：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> imgUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&#39;./img.png&#39;</span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href</span>
<span class="line">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;hero-img&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>src <span class="token operator">=</span> imgUrl</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这在现代浏览器中能够原生使用 - 实际上，Vite 并不需要在开发阶段处理这些代码！</p><p>这个模式同样还可以通过字符串模板支持动态 URL：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">getImageUrl</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">./dir/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.png</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在生产构建时，Vite 才会进行必要的转换保证 URL 在打包和资源哈希后仍指向正确的地址。然而，这个 URL 字符串必须是静态的，这样才好分析。否则代码将被原样保留、因而在 <code>build.target</code> 不支持 <code>import.meta.url</code> 时会导致运行时错误。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// Vite 不会转换这个</span></span>
<span class="line"><span class="token keyword">const</span> imgUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>imagePath<span class="token punctuation">,</span> <span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>href</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>import.meta.url</code> 在浏览器和 Node.js 中有不同的语义。</p><p>特定的 <code>__filename</code> 和 <code>__dirname</code> 在 ES 模块中不被允许，我们需要使用可替换的 <code>import.meta.url</code> 替换。它包含一个绝对路径的 URL 文件。举例来说：<code>&#39;file:///Users/rauschma/my-module.mjs&#39;</code></p><h2 id="url" tabindex="-1"><a class="header-anchor" href="#url"><span>URL</span></a></h2><p>URL() 构造函数返回一个新创建的 URL 对象，该对象表示由参数定义的 URL。</p><p>如果给定的基本 URL 或生成的 URL 不是有效的 URL，则会抛出 JavaScript TypeError 异常。</p><p>语法：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> base<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>url</code><br> 一个表示绝对或相对 URL 的 DOMString 或任何具有字符串化方法的对象，例如 <code>&lt;a&gt;</code> 或 <code>&lt;area&gt;</code> 元素。如果<code> url</code> 是相对 URL，则会将 <code>base</code> 用作基准 URL。如果 <code>url</code> 是绝对 URL，则无论参数 <code>base</code> 是否存在，都将被忽略。</li><li><code>base</code> 可选<br> 一个表示基准 URL 的字符串，当 <code>url</code> 为相对 URL 时，它才会生效。如果未指定，它默认为 <code>undefined</code></li></ul>`,16),o=[p];function l(c,r){return s(),n("div",null,o)}const u=a(t,[["render",l],["__file","vite.import.meta.url.html.vue"]]),d=JSON.parse('{"path":"/vue3/vite.import.meta.url.html","title":"import.meta.url 简介","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"URL","slug":"url","link":"#url","children":[]}],"git":{"updatedTime":1725614539000,"contributors":[{"name":"BaronYan","email":"1229598328@qq.com","commits":2}]},"filePathRelative":"vue3/vite.import.meta.url.md","excerpt":"\\n<p><a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">import.meta.url</a> 是一个 ESM 的原生功能，会暴露当前模块的 URL。\\n将它与原生的 <a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/API/URL/URL\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">URL</a> 构造器 组合使用，在一个 JavaScript 模块中，通过相对路径我们就能得到一个被完整解析的静态资源 URL：</p>"}');export{u as comp,d as data};
