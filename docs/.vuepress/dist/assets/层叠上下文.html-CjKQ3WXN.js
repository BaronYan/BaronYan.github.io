import{_ as e,c as o,o as i,d as l}from"./app-T1fo0xWa.js";const n="/assets/20240729230746-D9P3DOU4.png",d="/assets/20240730211404-j2SRzM4n.png",t="/assets/20240730213919-C3nPnq6w.png",c={},s=l('<p><a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="noopener noreferrer">深入理解CSS中的层叠上下文和层叠顺序</a></p><h2 id="什么是层叠上下文" tabindex="-1"><a class="header-anchor" href="#什么是层叠上下文"><span>什么是层叠上下文</span></a></h2><p><code>z-index</code> 属性实际上只是CSS层叠上下文和层叠顺序中的一叶小舟。</p><p>层叠上下文是HTML中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解为这个元素在z轴上就“高人一等”。</p><p><img src="'+n+'" alt="层叠上下文"></p><p>层叠上下文是一个概念，可以把「层叠上下文」理解为当官：网页中有很多很多的元素，我们可以看成是真实世界的芸芸众生。 真实世界里，我们大多数人是普通老百姓们，还有一部分人是做官的官员。OK，这里的“官员”就可以理解为网页中的层叠上下文元素。</p><h3 id="什么是层叠水平" tabindex="-1"><a class="header-anchor" href="#什么是层叠水平"><span>什么是层叠水平</span></a></h3><p>“层叠水平”决定了同一个层叠上下文中元素在z轴上的显示顺序。</p><p>页面中的每个元素都是独立的个体，他们一定是会有一个类似的排名排序的情况存在。 而这个排名排序、论资排辈就是我们这里所说的“层叠水平”。</p><p>层叠上下文元素的层叠水平可以理解为官员的职级，1品2品，县长省长之类；对于普通元素，这个嘛……你自己随意理解。</p><p>于是，显而易见，<span class="bg-yellow-200">所有的元素都有层叠水平，包括层叠上下文元素</span>，层叠上下文元素的层叠水平可以理解为官员的职级，1品2品，县长省长之类。 然后，对于普通元素的层叠水平，我们的探讨仅仅局限在当前层叠上下文元素中。为什么呢？因为否则没有意义。</p><p>这么理解吧~ 上面提过元素具有层叠上下文好比当官，大家都知道的，这当官的家里都有丫鬟啊保镖啊管家啊什么的。 所谓打狗看主人，A官员家里的管家和B官员家里的管家做PK实际上是没有意义的，因为他们牛不牛逼完全由他们的主子决定的。 一人得道鸡犬升天，你说这和珅家里的管家和七侠镇娄知县县令家里的管家有可比性吗？李总理的秘书是不是分分钟灭了你村支部书记的秘书（如果有）。</p><p>翻译成术语就是：普通元素的层叠水平优先由层叠上下文决定，因此，层叠水平的比较只有在当前层叠上下文元素中才有意义。</p><p>需要注意的是，诸位千万不要把层叠水平和 z-index 属性混为一谈。没错，某些情况下z-index确实可以影响层叠水平，但是，只限于定位元素以及flex盒子的孩子元素；而层叠水平所有的元素都存在。</p><h3 id="什么是层叠顺序" tabindex="-1"><a class="header-anchor" href="#什么是层叠顺序"><span>什么是层叠顺序</span></a></h3><p>“层叠顺序” 表示元素发生层叠时候有着特定的垂直显示顺序，注意，这里跟上面两个不一样，上面的层叠上下文和层叠水平是概念，而这里的层叠顺序是规则。</p><p>在CSS2.1的年代，在CSS3还没有出现的时候（注意这里的前提），层叠顺序规则遵循下面这张图：</p><p><img src="'+d+'" alt="层叠顺序"></p><p>缺失的关键信息包括：</p><p>位于最低水平的<code>border/background</code>指的是层叠上下文元素的边框和背景色。每一个层叠顺序规则适用于一个完整的层叠上下文元素。</p><p>z-index:0实际上和z-index:auto单纯从层叠水平上看，是可以看成是一样的。注意这里的措辞——“单纯从层叠水平上看”，实际上，两者在层叠上下文领域有着根本性的差异。</p><p>大家有没有想过，为什么内联元素的层叠顺序要比浮动元素和块状元素都高？</p><p>诸如<code>border/background</code>一般为装饰属性，而浮动和块状元素一般用作布局，而内联元素都是内容。网页中最重要的是什么？当然是内容了哈，对不对！</p><p>因此，一定要让内容的层叠顺序相当高，当发生层叠是很好，重要的文字啊图片内容可以优先暴露在屏幕上。</p><h3 id="务必牢记的层叠准则" tabindex="-1"><a class="header-anchor" href="#务必牢记的层叠准则"><span>务必牢记的层叠准则</span></a></h3><p>下面这两个是层叠领域的黄金准则。当元素发生层叠的时候，其覆盖关系遵循下面2个准则：</p><ol><li><strong>谁大谁上</strong>：当具有明显的层叠水平标示的时候，如识别的<code>z-indx</code>值，在同一个层叠上下文领域，层叠水平值大的那一个覆盖小的那一个。通俗讲就是官大的压死官小的。</li><li><strong>后来居上</strong>：当元素的层叠水平一致、层叠顺序相同的时候，在DOM流中处于后面的元素会覆盖前面的元素。</li></ol><p>在CSS和HTML领域，只要元素发生了重叠，都离不开上面这两个黄金准则。</p><h3 id="层叠上下文的特性" tabindex="-1"><a class="header-anchor" href="#层叠上下文的特性"><span>层叠上下文的特性</span></a></h3><ul><li>层叠上下文的层叠水平要比普通元素高；</li><li>层叠上下文可以阻断元素的混合模式；</li><li>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文。</li><li>每个层叠上下文和兄弟元素独立，也就是当进行层叠变化或渲染的时候，只需要考虑后代元素。</li><li>每个层叠上下文是自成体系的，当元素发生层叠的时候，整个元素被认为是在父层叠上下文的层叠顺序中。</li></ul><h3 id="层叠上下文的创建" tabindex="-1"><a class="header-anchor" href="#层叠上下文的创建"><span>层叠上下文的创建</span></a></h3><p>层叠上下文基本上是有一些特定的CSS属性创建的。我将其总结为3个流派，也就是做官的3种途径：</p><ul><li><strong>皇亲国戚派</strong>：页面根元素天生具有层叠上下文，称之为“根层叠上下文”。</li><li><strong>科考入选派</strong>：z-index值为数值的定位元素的传统层叠上下文。</li><li><strong>其他当官途径</strong>：其他CSS3属性。</li></ul><ol><li><strong>根层叠上下文</strong><br> 指的是页面根元素，也就是滚动条的默认的始作俑者<code>&lt;html&gt;</code>元素。这就是为什么，绝对定位元素在left/top等值定位的时候，如果没有其他定位元素限制，会相对浏览器窗口定位的原因。</li><li><strong>定位元素与传统层叠上下文</strong><br> 对于包含有 <code>position:relative/position:absolute</code> 的定位元素，以及FireFox/IE浏览器（不包括Chrome等webkit内核浏览器）（目前，也就是2016年初是这样）下含有<code>position:fixed</code> 声明的定位元素，当其<code>z-index</code>值不是<code>auto</code>的时候，会创建层叠上下文。</li></ol><p><img src="'+t+'" alt="层叠顺序"></p><p>差别就在于，<code>z-index:0</code>所在的<code>&lt;div&gt;</code>元素是层叠上下文元素，而<code>z-index:auto</code>所在的<code>&lt;div&gt;</code>元素是一个普通的元素，于是，里面的两个<code>&lt;img&gt;</code>妹子的层叠比较就不受父级的影响，两者直接套用层叠黄金准则，这里，两者有着明显不一的<code>z-index</code>值，因此，遵循“谁大谁上”的准则，于是，<code>z-index</code>为2的那个横妹子，就趴在了<code>z-index</code>为1的竖妹子身上。</p><p>而<code>z-index</code>一旦变成数值，哪怕是<code>0</code>，都会创建一个层叠上下文。此时，层叠规则就发生了变化。层叠上下文的特性里面最后一条——自成体系。两个<code>&lt;img&gt;</code>妹子的层叠顺序比较变成了优先比较其父级层叠上下文元素的层叠顺序。这里，由于两者都是<code>z-index:0</code>，层叠顺序这一块两者一样大，此时，遵循层叠黄金准则的另外一个准则“后来居上”，根据在DOM流中的位置决定谁在上面，于是，位于后面的竖着的妹子就自然而然趴在了横着的妹子身上。对，没错，<code>&lt;img&gt;</code>元素上的<code>z-index</code>打酱油了！</p><p>有时候，我们在网页重构的时候，会发现，<code>z-index</code>嵌套错乱，看看是不是受父级的层叠上下文元素干扰了。然后，可能没多大意义了，但我还是提一下，算是祭奠下，IE6/IE7浏览器有个bug，就是<code>z-index:auto</code>的定位元素也会创建层叠上下文。这就是为什么在过去，IE6/IE7的z-index会搞死人的原因。</p><p>然后，我再提一下<code>position:fixed</code>, 在过去，<code>position:fixed</code>和<code>relative/absolute</code>在层叠上下文这一块是一路货色，都是需要<code>z-index</code>为数值才行。但是，不知道什么时候起，Chrome等webkit内核浏览器，<code>position:fixed</code>元素天然层叠上下文元素，无需<code>z-index</code>为数值。根据我的测试，目前，IE以及FireFox仍是老套路。</p><h4 id="css3与新时代的层叠上下文" tabindex="-1"><a class="header-anchor" href="#css3与新时代的层叠上下文"><span>CSS3与新时代的层叠上下文</span></a></h4><p>CSS3的出现除了带来了新属性，同时还对过去的很多规则发出了挑战。 例如，CSS3 transform对 <a href="http://www.zhangxinxu.com/wordpress/2015/05/css3-transform-affect/" target="_blank" rel="noopener noreferrer">overflow隐藏对position:fixed 定位的影响</a>等。而这里，层叠上下文这一块的影响要更加广泛与显著。</p><p>如下：</p><ol><li>z-index值不为auto的flex项(父元素<code>display:flex|inline-flex</code>).</li><li>元素的opacity值不是1.</li><li>元素的transform值不是none.</li><li>元素mix-blend-mode值不是normal.</li><li>元素的filter值不是none.</li><li>元素的isolation值是isolate.</li><li>will-change指定的属性值为上面任意一个。</li><li>元素的-webkit-overflow-scrolling设为touch.</li></ol><p>基本上每一项都有很多槽点。</p><ol><li><code>display:flex|inline-flex</code>与层叠上下文 注意，这里的规则有些负责复杂。要满足两个条件才能形成层叠上下文： <ol><li>条件1是父级需要是<code>display:flex</code>或者<code>display:inline-flex</code>水平，</li><li>条件2是子元素的z-index不是auto，必须是数值。此时，这个子元素为层叠上下文元素，没错，注意了，是子元素，不是flex父级元素。</li></ol></li></ol>',45),a=[s];function r(p,h){return i(),o("div",null,a)}const g=e(c,[["render",r],["__file","层叠上下文.html.vue"]]),f=JSON.parse('{"path":"/css/%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87.html","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"什么是层叠上下文","slug":"什么是层叠上下文","link":"#什么是层叠上下文","children":[{"level":3,"title":"什么是层叠水平","slug":"什么是层叠水平","link":"#什么是层叠水平","children":[]},{"level":3,"title":"什么是层叠顺序","slug":"什么是层叠顺序","link":"#什么是层叠顺序","children":[]},{"level":3,"title":"务必牢记的层叠准则","slug":"务必牢记的层叠准则","link":"#务必牢记的层叠准则","children":[]},{"level":3,"title":"层叠上下文的特性","slug":"层叠上下文的特性","link":"#层叠上下文的特性","children":[]},{"level":3,"title":"层叠上下文的创建","slug":"层叠上下文的创建","link":"#层叠上下文的创建","children":[]}]}],"git":{"updatedTime":1722350112000,"contributors":[{"name":"BaronYan","email":"1229598328@qq.com","commits":1}]},"filePathRelative":"css/层叠上下文.md","excerpt":"<p><a href=\\"https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">深入理解CSS中的层叠上下文和层叠顺序</a></p>\\n<h2>什么是层叠上下文</h2>\\n<p><code>z-index</code> 属性实际上只是CSS层叠上下文和层叠顺序中的一叶小舟。</p>\\n<p>层叠上下文是HTML中的一个三维的概念。如果一个元素含有层叠上下文，我们可以理解为这个元素在z轴上就“高人一等”。</p>"}');export{g as comp,f as data};
