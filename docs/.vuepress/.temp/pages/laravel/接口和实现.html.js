import comp from "/home/yanbeirong/www/myblog/docs/.vuepress/.temp/pages/laravel/接口和实现.html.vue"
const data = JSON.parse("{\"path\":\"/laravel/%E6%8E%A5%E5%8F%A3%E5%92%8C%E5%AE%9E%E7%8E%B0.html\",\"title\":\"\",\"lang\":\"en-US\",\"frontmatter\":{},\"headers\":[{\"level\":2,\"title\":\"使用 Laravel 的自动注册功能\",\"slug\":\"使用-laravel-的自动注册功能\",\"link\":\"#使用-laravel-的自动注册功能\",\"children\":[]},{\"level\":2,\"title\":\"接口（Interfaces）\",\"slug\":\"接口-interfaces\",\"link\":\"#接口-interfaces\",\"children\":[]},{\"level\":2,\"title\":\"实现（Implementations）\",\"slug\":\"实现-implementations\",\"link\":\"#实现-implementations\",\"children\":[{\"level\":3,\"title\":\"例子\",\"slug\":\"例子\",\"link\":\"#例子\",\"children\":[]}]},{\"level\":2,\"title\":\"服务提供者（Service Providers）\",\"slug\":\"服务提供者-service-providers\",\"link\":\"#服务提供者-service-providers\",\"children\":[{\"level\":3,\"title\":\"创建服务提供者\",\"slug\":\"创建服务提供者\",\"link\":\"#创建服务提供者\",\"children\":[]}]},{\"level\":2,\"title\":\"依赖注入和服务容器\",\"slug\":\"依赖注入和服务容器\",\"link\":\"#依赖注入和服务容器\",\"children\":[]},{\"level\":2,\"title\":\"使用接口和实现的好处\",\"slug\":\"使用接口和实现的好处\",\"link\":\"#使用接口和实现的好处\",\"children\":[]},{\"level\":2,\"title\":\"总结：\",\"slug\":\"总结\",\"link\":\"#总结\",\"children\":[]},{\"level\":2,\"title\":\"对于小型项目，是否有必要使用接口?\",\"slug\":\"对于小型项目-是否有必要使用接口\",\"link\":\"#对于小型项目-是否有必要使用接口\",\"children\":[]}],\"git\":{\"updatedTime\":1726930181000,\"contributors\":[{\"name\":\"BaronYan\",\"email\":\"1229598328@qq.com\",\"commits\":1}]},\"filePathRelative\":\"laravel/接口和实现.md\",\"excerpt\":\"<p>在 <code>AppServiceProvider</code> 中注册接口和实现的绑定是 Laravel 的一种常见做法，但你提出了一个很好的问题。让我解释一下原因，并提供一些替代方案：</p>\\n<ol>\\n<li>为什么在 <code>AppServiceProvider</code> 中注册：\\n<ul>\\n<li><code>AppServiceProvider</code> 是 Laravel 应用的主要服务提供者，它在应用启动时就会被加载。</li>\\n<li>它提供了一个集中的地方来注册所有的服务绑定，使得管理这些绑定变得更加容易。</li>\\n<li>对于小型到中型的应用来说，这通常是一个足够好的解决方案。</li>\\n</ul>\\n</li>\\n<li>替代方案：\\n<ul>\\n<li>创建专门的 <code>RepositoryServiceProvider</code></li>\\n<li>如果你的应用有很多仓库，或者你想要更好地组织你的服务提供者，你可以创建一个专门的 RepositoryServiceProvider：<code>php artisan make:provider RepositoryServiceProvider</code></li>\\n<li>然后在 <code>config/app.php</code> 中注册这个新的服务提供者：<div class=\\\"language-php\\\" data-highlighter=\\\"prismjs\\\" data-ext=\\\"php\\\" data-title=\\\"php\\\"><pre class=\\\"language-php\\\"><code><span class=\\\"line\\\"><span class=\\\"token string single-quoted-string\\\">'providers'</span> <span class=\\\"token operator\\\">=&gt;</span> <span class=\\\"token punctuation\\\">[</span></span>\\n<span class=\\\"line\\\">    <span class=\\\"token comment\\\">// 其他服务提供者...</span></span>\\n<span class=\\\"line\\\">    <span class=\\\"token class-name class-name-fully-qualified static-context\\\">App<span class=\\\"token punctuation\\\">\\\\</span>Providers<span class=\\\"token punctuation\\\">\\\\</span>RepositoryServiceProvider</span><span class=\\\"token operator\\\">::</span><span class=\\\"token keyword\\\">class</span><span class=\\\"token punctuation\\\">,</span></span>\\n<span class=\\\"line\\\"><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span></span>\\n<span class=\\\"line\\\"></span></code></pre></div></li>\\n</ul>\\n</li>\\n</ol>\"}")
export { comp, data }
